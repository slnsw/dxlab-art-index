{"ast":null,"code":"var _jsxFileName = \"/Users/luked/Documents/slnsw/dxlab-art-index/components/SearchTextInput/SearchTextInputV2.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport Icon from '../Icon';\nimport useDebounce from '../../lib/hooks/use-debounce';\nimport css from './SearchTextInput.module.scss';\n\n/**\n * Search input box component with clear button and debounce feature\n * TODO: Test this v2 component out with Diary Files before switching it over\n */\nconst SearchTextInputV2 = /*#__PURE__*/React.memo((_ref) => {\n  let {\n    name,\n    defaultValue,\n    placeholder,\n    className,\n    debounceTime = 0,\n    onChange\n  } = _ref,\n      restProps = _objectWithoutProperties(_ref, [\"name\", \"defaultValue\", \"placeholder\", \"className\", \"debounceTime\", \"onChange\"]);\n\n  const [inputValue, setInputValue] = React.useState(defaultValue);\n  const debouncedInputValue = useDebounce(inputValue, debounceTime);\n  React.useEffect(() => {\n    if (typeof onChange === 'function') {\n      onChange(debouncedInputValue);\n    }\n  }, [debouncedInputValue, onChange]);\n\n  const handleInputChange = event => {\n    var _event$target;\n\n    const newValue = event === null || event === void 0 ? void 0 : (_event$target = event.target) === null || _event$target === void 0 ? void 0 : _event$target.value;\n    setInputValue(newValue);\n  };\n\n  const handleCloseClick = () => {\n    setInputValue('');\n  };\n\n  return __jsx(\"div\", {\n    className: [css.searchTextInput, className || ''].join(' '),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }\n  }, __jsx(\"input\", _extends({\n    name: name,\n    type: \"text\",\n    placeholder: placeholder,\n    value: inputValue || '',\n    className: css.input,\n    onChange: handleInputChange\n  }, restProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }\n  })), inputValue && inputValue.length > 0 && __jsx(\"button\", {\n    type: \"button\",\n    className: css.clearButton,\n    \"aria-label\": \"Clear text\",\n    onClick: handleCloseClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 11\n    }\n  }, __jsx(Icon, {\n    name: \"close\",\n    colour: \"white\",\n    size: 'lg',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }\n  })));\n});\nexport default SearchTextInputV2;","map":{"version":3,"sources":["/Users/luked/Documents/slnsw/dxlab-art-index/components/SearchTextInput/SearchTextInputV2.tsx"],"names":["React","Icon","useDebounce","css","SearchTextInputV2","memo","name","defaultValue","placeholder","className","debounceTime","onChange","restProps","inputValue","setInputValue","useState","debouncedInputValue","useEffect","handleInputChange","event","newValue","target","value","handleCloseClick","searchTextInput","join","input","length","clearButton"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAOC,IAAP,MAAiB,SAAjB;AACA,OAAOC,WAAP,MAAwB,8BAAxB;AAEA,OAAOC,GAAP,MAAgB,+BAAhB;;AAWA;AACA;AACA;AACA;AACA,MAAMC,iBAAkC,gBAAGJ,KAAK,CAACK,IAAN,CACzC,UAQM;AAAA,MARL;AACCC,IAAAA,IADD;AAECC,IAAAA,YAFD;AAGCC,IAAAA,WAHD;AAICC,IAAAA,SAJD;AAKCC,IAAAA,YAAY,GAAG,CALhB;AAMCC,IAAAA;AAND,GAQK;AAAA,MADDC,SACC;;AACJ,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8Bd,KAAK,CAACe,QAAN,CAAeR,YAAf,CAApC;AACA,QAAMS,mBAAmB,GAAGd,WAAW,CAACW,UAAD,EAAaH,YAAb,CAAvC;AAEAV,EAAAA,KAAK,CAACiB,SAAN,CAAgB,MAAM;AACpB,QAAI,OAAON,QAAP,KAAoB,UAAxB,EAAoC;AAClCA,MAAAA,QAAQ,CAACK,mBAAD,CAAR;AACD;AACF,GAJD,EAIG,CAACA,mBAAD,EAAsBL,QAAtB,CAJH;;AAMA,QAAMO,iBAAiB,GAAIC,KAAD,IAAW;AAAA;;AACnC,UAAMC,QAAQ,GAAGD,KAAH,aAAGA,KAAH,wCAAGA,KAAK,CAAEE,MAAV,kDAAG,cAAeC,KAAhC;AACAR,IAAAA,aAAa,CAACM,QAAD,CAAb;AACD,GAHD;;AAKA,QAAMG,gBAAgB,GAAG,MAAM;AAC7BT,IAAAA,aAAa,CAAC,EAAD,CAAb;AACD,GAFD;;AAIA,SACE;AAAK,IAAA,SAAS,EAAE,CAACX,GAAG,CAACqB,eAAL,EAAsBf,SAAS,IAAI,EAAnC,EAAuCgB,IAAvC,CAA4C,GAA5C,CAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AACE,IAAA,IAAI,EAAEnB,IADR;AAEE,IAAA,IAAI,EAAC,MAFP;AAGE,IAAA,WAAW,EAAEE,WAHf;AAIE,IAAA,KAAK,EAAEK,UAAU,IAAI,EAJvB;AAKE,IAAA,SAAS,EAAEV,GAAG,CAACuB,KALjB;AAME,IAAA,QAAQ,EAAER;AANZ,KAOMN,SAPN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF,EAWGC,UAAU,IAAIA,UAAU,CAACc,MAAX,GAAoB,CAAlC,IACC;AACE,IAAA,IAAI,EAAC,QADP;AAEE,IAAA,SAAS,EAAExB,GAAG,CAACyB,WAFjB;AAGE,kBAAW,YAHb;AAIE,IAAA,OAAO,EAAEL,gBAJX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAME,MAAC,IAAD;AAAM,IAAA,IAAI,EAAC,OAAX;AAAmB,IAAA,MAAM,EAAC,OAA1B;AAAkC,IAAA,IAAI,EAAE,IAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANF,CAZJ,CADF;AAwBD,CApDwC,CAA3C;AAuDA,eAAenB,iBAAf","sourcesContent":["import React from 'react';\n\nimport Icon from '../Icon';\nimport useDebounce from '../../lib/hooks/use-debounce';\n\nimport css from './SearchTextInput.module.scss';\n\ntype Props = {\n  name?: string;\n  defaultValue?: string;\n  placeholder?: string;\n  className?: string;\n  debounceTime?: number;\n  onChange?: (value: string) => void;\n};\n\n/**\n * Search input box component with clear button and debounce feature\n * TODO: Test this v2 component out with Diary Files before switching it over\n */\nconst SearchTextInputV2: React.FC<Props> = React.memo(\n  ({\n    name,\n    defaultValue,\n    placeholder,\n    className,\n    debounceTime = 0,\n    onChange,\n    ...restProps\n  }) => {\n    const [inputValue, setInputValue] = React.useState(defaultValue);\n    const debouncedInputValue = useDebounce(inputValue, debounceTime);\n\n    React.useEffect(() => {\n      if (typeof onChange === 'function') {\n        onChange(debouncedInputValue);\n      }\n    }, [debouncedInputValue, onChange]);\n\n    const handleInputChange = (event) => {\n      const newValue = event?.target?.value;\n      setInputValue(newValue);\n    };\n\n    const handleCloseClick = () => {\n      setInputValue('');\n    };\n\n    return (\n      <div className={[css.searchTextInput, className || ''].join(' ')}>\n        <input\n          name={name}\n          type=\"text\"\n          placeholder={placeholder}\n          value={inputValue || ''}\n          className={css.input}\n          onChange={handleInputChange}\n          {...restProps}\n        />\n\n        {inputValue && inputValue.length > 0 && (\n          <button\n            type=\"button\"\n            className={css.clearButton}\n            aria-label=\"Clear text\"\n            onClick={handleCloseClick}\n          >\n            <Icon name=\"close\" colour=\"white\" size={'lg'} />\n          </button>\n        )}\n      </div>\n    );\n  },\n);\n\nexport default SearchTextInputV2;\n"]},"metadata":{},"sourceType":"module"}