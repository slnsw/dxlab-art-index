{"ast":null,"code":"var _jsxFileName = \"/Users/luked/Documents/slnsw/dxlab-art-index/pages/art-index.tsx\";\nvar __jsx = React.createElement;\nimport React from 'react';\n// import * as d3 from 'd3';\n// import axios from 'axios';\nimport ArtIndexApp from '../components/ArtIndexApp';\nimport ArtIndexHome from '../components/ArtIndexHome';\nimport ArtIndexSearch from '../components/ArtIndexSearch';\nimport ArtIndexArtist from '../components/ArtIndexArtist';\nimport ArtIndexWork from '../components/ArtIndexWork';\nimport ArtIndexCharts from '../components/ArtIndexCharts';\nimport ArtIndexExplore from '../components/ArtIndexExplore';\nimport ArtIndexExhibition from '../components/ArtIndexExhibition';\nimport { ArtIndexProvider } from '../lib/contexts/art-index-context';\nimport axios from '../lib/axios';\nconst config = {\n  home: {\n    pathname: '/art-index',\n    title: 'Home'\n  },\n  search: {\n    pathname: '/art-index/search',\n    title: 'Search'\n  },\n  artist: {\n    pathname: '/art-index/artist/[id]',\n    title: 'Artist'\n  },\n  work: {\n    pathname: '/art-index/work/[id]',\n    title: 'Work'\n  },\n  exhibition: {\n    pathname: '/art-index/exhibition/[id]',\n    title: 'Exhibition'\n  },\n  charts: {\n    pathname: '/art-index/charts',\n    title: 'Charts'\n  },\n  explore: {\n    pathname: '/art-index/explore',\n    title: 'Explore'\n  }\n};\n\nconst ArtIndexPage = ({\n  pathname,\n  artist = null,\n  exhibition = null,\n  work = null\n}) => {\n  const pageConfig = Object.entries(config).find(o => o[1].pathname === pathname);\n  let title;\n  let metaDescription;\n  let metaImageUrl;\n  let metaImageAlt;\n  let metaImageWidth;\n  let metaImageHeight;\n\n  if (pathname === config.artist.pathname) {\n    title = `${artist.firstName} ${artist.lastName} (Artist)`;\n  } else if (pathname === config.work.pathname) {\n    title = `${work.title} (Work)`;\n  } else if (pathname === config.exhibition.pathname) {\n    title = `${exhibition.name} (Exhibition)`;\n  } else {\n    title = `${pageConfig[1].title}`;\n  }\n\n  if (pathname === config.artist.pathname) {\n    metaDescription = `Art Index: artist entry for ${artist.firstName} ${artist.lastName}`;\n  } else if (pathname === config.work.pathname) {\n    metaDescription = `Art Index: entry for '${work.title}' by ${work.artistFirstName} ${work.artistLastName}`;\n  } else if (pathname === config.exhibition.pathname) {\n    metaDescription = `Art Index: entry for ${exhibition.name} (Exhibition)`;\n  } else {\n    metaDescription = `Art Index - a DX Lab experiment`;\n  }\n\n  if (pathname === config.artist.pathname && artist.thumbnailFile) {\n    metaImageUrl = `https://dxlab.sl.nsw.gov.au/art-index/images/artists/${artist.thumbnailFile}`;\n    metaImageAlt = `Art Index: image of artist ${artist.firstName} ${artist.lastName}`;\n    metaImageWidth = 600; // ? not true, but they are square...\n\n    metaImageHeight = 600;\n  } else if (pathname === config.work.pathname && work.imageUrl) {\n    metaImageUrl = work.imageUrl;\n    metaImageAlt = `Art Index: image of '${work.title}' by ${work.artistFirstName} ${work.artistLastName}`;\n  } else {\n    metaImageUrl = 'https://dxlab.sl.nsw.gov.au/art-index/images/art-index-image.jpg';\n    metaImageAlt = `Art Index - a DX Lab experiment`;\n    metaImageWidth = 1200;\n    metaImageHeight = 627;\n  }\n\n  return __jsx(ArtIndexProvider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 5\n    }\n  }, __jsx(ArtIndexApp, {\n    title: title,\n    metaDescription: metaDescription,\n    metaImageUrl: metaImageUrl,\n    metaImageAlt: metaImageAlt,\n    metaImageWidth: metaImageWidth,\n    metaImageHeight: metaImageHeight,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }\n  }, pathname === config.home.pathname && __jsx(ArtIndexHome, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 47\n    }\n  }), pathname === config.search.pathname && __jsx(ArtIndexSearch, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 49\n    }\n  }), pathname === config.artist.pathname && __jsx(ArtIndexArtist, {\n    artist: artist,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 11\n    }\n  }), pathname === config.exhibition.pathname && __jsx(ArtIndexExhibition, {\n    exhibition: exhibition,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 11\n    }\n  }), pathname === config.work.pathname && __jsx(ArtIndexWork, {\n    work: work,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 47\n    }\n  }), pathname === config.charts.pathname && __jsx(ArtIndexCharts, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 49\n    }\n  }), pathname === config.explore.pathname && __jsx(ArtIndexExplore, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 50\n    }\n  })));\n};\n\nArtIndexPage.getInitialProps = async ({\n  req,\n  pathname,\n  query\n}) => {\n  const isServer = Boolean(req);\n  const host = isServer ? `http://${req.headers.host}` : '';\n\n  if (pathname === config.work.pathname) {\n    // TODO: Work out https or http\n    const result = await axios.get(`${host}/api/art-index/works/${query.id}`);\n    const work = result.data;\n    return {\n      work,\n      pathname\n    };\n  }\n\n  if (pathname === config.artist.pathname) {\n    // TODO: Work out https or http\n    const result = await axios.get(`${host}/api/art-index/artists/${query.id}`);\n    const artist = result.data;\n    return {\n      artist,\n      pathname\n    };\n  }\n\n  if (pathname === config.exhibition.pathname) {\n    // TODO: Work out https or http\n    const result = await axios.get(`${host}/api/art-index/exhibitions/${query.id}`);\n    const exhibition = result.data;\n    return {\n      exhibition,\n      pathname\n    };\n  }\n\n  return {\n    pathname,\n    query\n  };\n};\n\nexport default ArtIndexPage;","map":{"version":3,"sources":["/Users/luked/Documents/slnsw/dxlab-art-index/pages/art-index.tsx"],"names":["React","ArtIndexApp","ArtIndexHome","ArtIndexSearch","ArtIndexArtist","ArtIndexWork","ArtIndexCharts","ArtIndexExplore","ArtIndexExhibition","ArtIndexProvider","axios","config","home","pathname","title","search","artist","work","exhibition","charts","explore","ArtIndexPage","pageConfig","Object","entries","find","o","metaDescription","metaImageUrl","metaImageAlt","metaImageWidth","metaImageHeight","firstName","lastName","name","artistFirstName","artistLastName","thumbnailFile","imageUrl","getInitialProps","req","query","isServer","Boolean","host","headers","result","get","id","data"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { NextPage, NextPageContext } from 'next';\n// import * as d3 from 'd3';\n// import axios from 'axios';\n\nimport ArtIndexApp from '../components/ArtIndexApp';\nimport ArtIndexHome from '../components/ArtIndexHome';\nimport ArtIndexSearch from '../components/ArtIndexSearch';\nimport ArtIndexArtist from '../components/ArtIndexArtist';\nimport ArtIndexWork from '../components/ArtIndexWork';\nimport ArtIndexCharts from '../components/ArtIndexCharts';\nimport ArtIndexExplore from '../components/ArtIndexExplore';\nimport ArtIndexExhibition from '../components/ArtIndexExhibition';\n\nimport { ArtIndexProvider } from '../lib/contexts/art-index-context';\nimport {\n  ArtIndexArtistType,\n  ArtIndexExhibitionType,\n  ArtIndexWorkType,\n} from '../types/art-index-types';\nimport axios from '../lib/axios';\n\nconst config = {\n  home: { pathname: '/art-index' as const, title: 'Home' },\n  search: { pathname: '/art-index/search' as const, title: 'Search' },\n  artist: { pathname: '/art-index/artist/[id]' as const, title: 'Artist' },\n  work: { pathname: '/art-index/work/[id]' as const, title: 'Work' },\n  exhibition: {\n    pathname: '/art-index/exhibition/[id]' as const,\n    title: 'Exhibition',\n  },\n  charts: { pathname: '/art-index/charts' as const, title: 'Charts' },\n  explore: { pathname: '/art-index/explore' as const, title: 'Explore' },\n};\n\ntype Pathnames = {\n  home: typeof config['home']['pathname'];\n  search: typeof config['search']['pathname'];\n  artist: typeof config['artist']['pathname'];\n  work: typeof config['work']['pathname'];\n  exhibition: typeof config['exhibition']['pathname'];\n  charts: typeof config['charts']['pathname'];\n  explore: typeof config['explore']['pathname'];\n};\n\ntype ValueOf<T> = T[keyof T];\n\ntype PathnameList = ValueOf<Pathnames>;\n\ntype Props =\n  | {\n      pathname: Pathnames['home'] | Pathnames['charts'] | Pathnames['explore'];\n      artist?: never;\n      exhibition?: never;\n      work?: never;\n    }\n  | {\n      pathname: Pathnames['search'];\n      query?: {\n        id?: string;\n      };\n      artist?: never;\n      exhibition?: never;\n      work?: never;\n    }\n  | {\n      pathname: Pathnames['artist'];\n      artist: ArtIndexArtistType;\n      exhibition?: never;\n      work?: never;\n    }\n  | {\n      pathname: Pathnames['work'];\n      artist?: never;\n      exhibition?: never;\n      work: ArtIndexWorkType;\n    }\n  | {\n      pathname: Pathnames['exhibition'];\n      artist?: never;\n      exhibition: ArtIndexExhibitionType;\n      work?: never;\n    };\n\nconst ArtIndexPage: NextPage<Props> = ({\n  pathname,\n  artist = null,\n  exhibition = null,\n  work = null,\n}) => {\n  const pageConfig = Object.entries(config).find(\n    (o) => o[1].pathname === pathname,\n  );\n\n  let title;\n  let metaDescription;\n  let metaImageUrl;\n  let metaImageAlt;\n  let metaImageWidth;\n  let metaImageHeight;\n\n  if (pathname === config.artist.pathname) {\n    title = `${artist.firstName} ${artist.lastName} (Artist)`;\n  } else if (pathname === config.work.pathname) {\n    title = `${work.title} (Work)`;\n  } else if (pathname === config.exhibition.pathname) {\n    title = `${exhibition.name} (Exhibition)`;\n  } else {\n    title = `${pageConfig[1].title}`;\n  }\n\n  if (pathname === config.artist.pathname) {\n    metaDescription = `Art Index: artist entry for ${artist.firstName} ${artist.lastName}`;\n  } else if (pathname === config.work.pathname) {\n    metaDescription = `Art Index: entry for '${work.title}' by ${work.artistFirstName} ${work.artistLastName}`;\n  } else if (pathname === config.exhibition.pathname) {\n    metaDescription = `Art Index: entry for ${exhibition.name} (Exhibition)`;\n  } else {\n    metaDescription = `Art Index - a DX Lab experiment`;\n  }\n\n  if (pathname === config.artist.pathname && artist.thumbnailFile) {\n    metaImageUrl = `https://dxlab.sl.nsw.gov.au/art-index/images/artists/${artist.thumbnailFile}`;\n    metaImageAlt = `Art Index: image of artist ${artist.firstName} ${artist.lastName}`;\n    metaImageWidth = 600; // ? not true, but they are square...\n    metaImageHeight = 600;\n  } else if (pathname === config.work.pathname && work.imageUrl) {\n    metaImageUrl = work.imageUrl;\n    metaImageAlt = `Art Index: image of '${work.title}' by ${work.artistFirstName} ${work.artistLastName}`;\n  } else {\n    metaImageUrl =\n      'https://dxlab.sl.nsw.gov.au/art-index/images/art-index-image.jpg';\n    metaImageAlt = `Art Index - a DX Lab experiment`;\n    metaImageWidth = 1200;\n    metaImageHeight = 627;\n  }\n\n  return (\n    <ArtIndexProvider>\n      <ArtIndexApp\n        title={title}\n        metaDescription={metaDescription}\n        metaImageUrl={metaImageUrl}\n        metaImageAlt={metaImageAlt}\n        metaImageWidth={metaImageWidth}\n        metaImageHeight={metaImageHeight}\n      >\n        {pathname === config.home.pathname && <ArtIndexHome />}\n        {pathname === config.search.pathname && <ArtIndexSearch />}\n        {pathname === config.artist.pathname && (\n          <ArtIndexArtist artist={artist} />\n        )}\n        {pathname === config.exhibition.pathname && (\n          <ArtIndexExhibition exhibition={exhibition} />\n        )}\n        {pathname === config.work.pathname && <ArtIndexWork work={work} />}\n        {pathname === config.charts.pathname && <ArtIndexCharts />}\n        {pathname === config.explore.pathname && <ArtIndexExplore />}\n      </ArtIndexApp>\n    </ArtIndexProvider>\n  );\n};\n\nArtIndexPage.getInitialProps = async ({\n  req,\n  pathname,\n  query,\n}: {\n  pathname: PathnameList;\n} & NextPageContext): Promise<Props> => {\n  const isServer = Boolean(req);\n  const host = isServer ? `http://${req.headers.host}` : '';\n\n  if (pathname === config.work.pathname) {\n    // TODO: Work out https or http\n    const result = await axios.get(`${host}/api/art-index/works/${query.id}`);\n    const work = result.data;\n\n    return {\n      work,\n      pathname,\n    };\n  }\n\n  if (pathname === config.artist.pathname) {\n    // TODO: Work out https or http\n    const result = await axios.get(`${host}/api/art-index/artists/${query.id}`);\n    const artist = result.data;\n\n    return {\n      artist,\n      pathname,\n    };\n  }\n\n  if (pathname === config.exhibition.pathname) {\n    // TODO: Work out https or http\n    const result = await axios.get(\n      `${host}/api/art-index/exhibitions/${query.id}`,\n    );\n    const exhibition = result.data;\n\n    return {\n      exhibition,\n      pathname,\n    };\n  }\n\n  return {\n    pathname,\n    query,\n  };\n};\n\nexport default ArtIndexPage;\n"]},"metadata":{},"sourceType":"module"}