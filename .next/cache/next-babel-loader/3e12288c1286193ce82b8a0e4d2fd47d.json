{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _s = $RefreshSig$();\n\nimport * as React from 'react';\n// https://css-tricks.com/dealing-with-stale-props-and-states-in-reacts-functional-components/\nexport function useAsyncReference(value) {\n  _s();\n\n  var isProp = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var ref = React.useRef(value);\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      forceRender = _React$useState2[1];\n\n  function updateState(newState) {\n    if (!Object.is(ref.current, newState)) {\n      ref.current = newState;\n      forceRender(function (s) {\n        return !s;\n      });\n    }\n  }\n\n  if (isProp) {\n    ref.current = value;\n    return ref;\n  }\n\n  return [ref, updateState];\n}\n\n_s(useAsyncReference, \"fIhJQHucqtpm1KutJuq7Ys5+WzM=\");","map":{"version":3,"sources":["/Users/luked/Documents/slnsw/dxlab-art-index/lib/hooks/use-async-reference.ts"],"names":["React","useAsyncReference","value","isProp","ref","useRef","useState","forceRender","updateState","newState","Object","is","current","s"],"mappings":";;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAYA;AACA,OAAO,SAASC,iBAAT,CAA8BC,KAA9B,EAAqD;AAAA;;AAAA,MAAhBC,MAAgB,uEAAP,KAAO;AAC1D,MAAMC,GAAG,GAAGJ,KAAK,CAACK,MAAN,CAAgBH,KAAhB,CAAZ;;AAD0D,wBAElCF,KAAK,CAACM,QAAN,CAAe,KAAf,CAFkC;AAAA;AAAA,MAEjDC,WAFiD;;AAI1D,WAASC,WAAT,CAAqBC,QAArB,EAA+B;AAC7B,QAAI,CAACC,MAAM,CAACC,EAAP,CAAUP,GAAG,CAACQ,OAAd,EAAuBH,QAAvB,CAAL,EAAuC;AACrCL,MAAAA,GAAG,CAACQ,OAAJ,GAAcH,QAAd;AACAF,MAAAA,WAAW,CAAC,UAACM,CAAD;AAAA,eAAO,CAACA,CAAR;AAAA,OAAD,CAAX;AACD;AACF;;AAED,MAAIV,MAAJ,EAAY;AACVC,IAAAA,GAAG,CAACQ,OAAJ,GAAcV,KAAd;AACA,WAAOE,GAAP;AACD;;AAED,SAAO,CAACA,GAAD,EAAMI,WAAN,CAAP;AACD;;GAjBeP,iB","sourcesContent":["import * as React from 'react';\n\nexport function useAsyncReference<T>(\n  a: any,\n  isProp: false,\n): [React.MutableRefObject<T>, (newState: any) => void];\n\nexport function useAsyncReference<T>(\n  a: any,\n  isProps: true,\n): React.MutableRefObject<T>;\n\n// https://css-tricks.com/dealing-with-stale-props-and-states-in-reacts-functional-components/\nexport function useAsyncReference<T>(value, isProp = false) {\n  const ref = React.useRef<T>(value);\n  const [, forceRender] = React.useState(false);\n\n  function updateState(newState) {\n    if (!Object.is(ref.current, newState)) {\n      ref.current = newState;\n      forceRender((s) => !s);\n    }\n  }\n\n  if (isProp) {\n    ref.current = value;\n    return ref;\n  }\n\n  return [ref, updateState];\n}\n"]},"metadata":{},"sourceType":"module"}