{"ast":null,"code":"var _jsxFileName = \"/Users/luked/Documents/slnsw/dxlab-art-index/components/LineChart/LineChart.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport * as d3 from 'd3';\nimport render from 'd3-render';\nimport useDimensions from '../../lib/hooks/use-dimensions';\nimport css from './LineChart.module.scss';\nconst defaultMargin = {\n  top: 10,\n  left: 40,\n  right: 10,\n  bottom: 20\n};\n\nconst LineChart = (_ref) => {\n  let {\n    data = [],\n    height = 200,\n    margin: newMargin = defaultMargin,\n    direction = 'vertical',\n    rotateXAxis = false,\n    showValues = false,\n    renderLine,\n    id = 'bar-chart',\n    className\n  } = _ref,\n      restProps = _objectWithoutProperties(_ref, [\"data\", \"height\", \"margin\", \"direction\", \"rotateXAxis\", \"showValues\", \"renderLine\", \"id\", \"className\"]);\n\n  // const [hoverIndex, setHoverIndex] = React.useState(null);\n  const [svgRef, dimensions, svgNode] = useDimensions();\n  const {\n    width\n  } = dimensions;\n\n  const margin = _objectSpread(_objectSpread({}, defaultMargin), newMargin); // console.log(data);\n\n\n  React.useEffect(() => {\n    if (svgNode && data.length > 0 && width) {\n      let x;\n      let y;\n      let xAxis;\n      let yAxis;\n      let line;\n      const maximum = d3.max(data, series => d3.max(series, d => d.value));\n      const svg = d3.select(svgNode);\n\n      if (direction === 'vertical') {\n        // x = d3\n        //   .scaleBand()\n        //   .domain(d3.range(data.length))\n        //   .range([margin.left, width - margin.right])\n        //   .padding(0.1);\n        x = d3.scaleUtc() // .domain(d3.extent(data, (d) => d.date))\n        .domain([d3.min(data, series => d3.min(series, d => d.date)), d3.max(data, series => d3.max(series, d => d.date))]).range([margin.left, width - margin.right]);\n        y = d3.scaleLinear().domain([0, maximum]).nice().range([height - margin.bottom, margin.top]);\n        line = d3.line().defined(d => !Number.isNaN(d.date)).x(d => {\n          return x(d.date);\n        }).y(d => {\n          return y(d.value);\n        });\n        xAxis = d3.axisBottom(x).ticks(10).tickFormat(d => {\n          return d.getFullYear();\n        }).tickSizeOuter(0);\n\n        yAxis = g => g.attr('transform', `translate(${margin.left + 1},0)`).call(d3.axisLeft(y).ticks(null, 's')).call(selection => selection.select('.domain').remove());\n\n        render(svg, [{\n          append: 'g',\n          children: data.map((series, i) => {\n            return _objectSpread({\n              append: 'path',\n              fill: 'none',\n              stroke: 'var(--colour-primary)',\n              strokeWidth: 1.5,\n              duration: 1000,\n              d: line(series)\n            }, typeof renderLine === 'function' ? renderLine(series, i) : {});\n          })\n        }, {\n          append: 'g',\n          class: 'x-axis',\n          // key: width,\n          key: Date.now(),\n          transform: `translate(0, ${height - margin.bottom})`,\n          call: xAxis\n        }, {\n          append: 'g',\n          call: yAxis\n        }]);\n\n        if (rotateXAxis) {\n          d3.selectAll(`#${id} .x-axis text`).style('text-anchor', 'end').attr('dx', '-1em').attr('dy', '-.5em').attr('transform', 'rotate(-90)');\n        }\n      } else {\n        y = d3.scaleOrdinal().domain(data.map(d => d.name)).range(data.map((_, i) => (height - margin.top - margin.bottom) / data.length * i + margin.top));\n        x = d3.scaleLinear().domain([0, d3.max(data, d => d.value)]).range([margin.left, width - margin.right]);\n        xAxis = d3.axisBottom(x);\n\n        yAxis = g => g.attr('transform', `translate(${margin.left},0)`).call(d3.axisLeft(y).ticks(null, 's'));\n\n        render(svg, [{\n          append: 'g',\n          fill: 'var(--colour-primary)',\n          children: data.map((d, i) => {\n            return {\n              append: 'rect',\n              x: margin.left + 1,\n              y: (height - margin.top - margin.bottom) / data.length * i + margin.top / 2,\n              width: d.value / maximum * (width - margin.left - margin.right),\n              height: (height - margin.top - margin.bottom) / data.length - 1\n            };\n          })\n        }, {\n          append: 'g',\n          key: width,\n          transform: `translate(0, ${height - margin.bottom})`,\n          call: xAxis\n        }, {\n          append: 'g',\n          call: yAxis\n        }]);\n      }\n    }\n  }, [svgNode, data, width, height, margin, id, showValues, direction, rotateXAxis, // hoverIndex,\n  renderLine]);\n  return __jsx(\"svg\", _extends({\n    ref: svgRef,\n    width: width,\n    height: height,\n    id: id,\n    className: [css.lineChart, className || ''].join(' ')\n  }, restProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 5\n    }\n  }));\n};\n\nLineChart.propTypes = {\n  className: PropTypes.string\n};\nexport default LineChart;","map":{"version":3,"sources":["/Users/luked/Documents/slnsw/dxlab-art-index/components/LineChart/LineChart.tsx"],"names":["React","PropTypes","d3","render","useDimensions","css","defaultMargin","top","left","right","bottom","LineChart","data","height","margin","newMargin","direction","rotateXAxis","showValues","renderLine","id","className","restProps","svgRef","dimensions","svgNode","width","useEffect","length","x","y","xAxis","yAxis","line","maximum","max","series","d","value","svg","select","scaleUtc","domain","min","date","range","scaleLinear","nice","defined","Number","isNaN","axisBottom","ticks","tickFormat","getFullYear","tickSizeOuter","g","attr","call","axisLeft","selection","remove","append","children","map","i","fill","stroke","strokeWidth","duration","class","key","Date","now","transform","selectAll","style","scaleOrdinal","name","_","lineChart","join","propTypes","string"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport * as d3 from 'd3';\nimport render from 'd3-render';\n\nimport useDimensions from '../../lib/hooks/use-dimensions';\n\nimport css from './LineChart.module.scss';\n\ntype Props = {\n  data: {\n    date: Date;\n    value: number;\n  }[][];\n  height?: number;\n  margin?: {\n    top?: number;\n    left?: number;\n    right?: number;\n    bottom?: number;\n  };\n  direction?: 'vertical' | 'horizontal';\n  rotateXAxis?: boolean;\n  showValues?: boolean;\n  renderLine?: Function;\n  id?: string;\n  className?: string;\n};\n\nconst defaultMargin = {\n  top: 10,\n  left: 40,\n  right: 10,\n  bottom: 20,\n};\n\nconst LineChart: React.FC<Props> = ({\n  data = [],\n  height = 200,\n  margin: newMargin = defaultMargin,\n  direction = 'vertical',\n  rotateXAxis = false,\n  showValues = false,\n  renderLine,\n  id = 'bar-chart',\n  className,\n  ...restProps\n}) => {\n  // const [hoverIndex, setHoverIndex] = React.useState(null);\n  const [svgRef, dimensions, svgNode] = useDimensions();\n  const { width } = dimensions;\n  const margin = {\n    ...defaultMargin,\n    ...newMargin,\n  };\n\n  // console.log(data);\n\n  React.useEffect(() => {\n    if (svgNode && data.length > 0 && width) {\n      let x;\n      let y;\n      let xAxis;\n      let yAxis;\n      let line;\n      const maximum = d3.max(data, (series) => d3.max(series, (d) => d.value));\n      const svg = d3.select(svgNode);\n\n      if (direction === 'vertical') {\n        // x = d3\n        //   .scaleBand()\n        //   .domain(d3.range(data.length))\n        //   .range([margin.left, width - margin.right])\n        //   .padding(0.1);\n\n        x = d3\n          .scaleUtc()\n          // .domain(d3.extent(data, (d) => d.date))\n          .domain([\n            d3.min(data, (series) => d3.min(series, (d) => d.date)),\n            d3.max(data, (series) => d3.max(series, (d) => d.date)),\n          ])\n          .range([margin.left, width - margin.right]);\n\n        y = d3\n          .scaleLinear()\n          .domain([0, maximum])\n          .nice()\n          .range([height - margin.bottom, margin.top]);\n\n        line = d3\n          .line()\n          .defined((d) => !Number.isNaN(d.date))\n          .x((d) => {\n            return x(d.date);\n          })\n          .y((d) => {\n            return y(d.value);\n          });\n\n        xAxis = d3\n          .axisBottom(x)\n          .ticks(10)\n          .tickFormat((d) => {\n            return d.getFullYear();\n          })\n          .tickSizeOuter(0);\n\n        yAxis = (g) =>\n          g\n            .attr('transform', `translate(${margin.left + 1},0)`)\n            .call(d3.axisLeft(y).ticks(null, 's'))\n            .call((selection) => selection.select('.domain').remove());\n\n        render(svg, [\n          {\n            append: 'g',\n            children: data.map((series, i) => {\n              return {\n                append: 'path',\n                fill: 'none',\n                stroke: 'var(--colour-primary)',\n                strokeWidth: 1.5,\n                duration: 1000,\n                d: line(series),\n                ...(typeof renderLine === 'function'\n                  ? renderLine(series, i)\n                  : {}),\n              };\n            }),\n          },\n          {\n            append: 'g',\n            class: 'x-axis',\n            // key: width,\n            key: Date.now(),\n            transform: `translate(0, ${height - margin.bottom})`,\n            call: xAxis,\n          },\n          {\n            append: 'g',\n            call: yAxis,\n          },\n        ]);\n\n        if (rotateXAxis) {\n          d3.selectAll(`#${id} .x-axis text`)\n            .style('text-anchor', 'end')\n            .attr('dx', '-1em')\n            .attr('dy', '-.5em')\n            .attr('transform', 'rotate(-90)');\n        }\n      } else {\n        y = d3\n          .scaleOrdinal()\n          .domain(data.map((d) => d.name))\n          .range(\n            data.map(\n              (_, i) =>\n                ((height - margin.top - margin.bottom) / data.length) * i +\n                margin.top,\n            ),\n          );\n\n        x = d3\n          .scaleLinear()\n          .domain([0, d3.max(data, (d) => d.value)])\n          .range([margin.left, width - margin.right]);\n\n        xAxis = d3.axisBottom(x);\n\n        yAxis = (g) =>\n          g\n            .attr('transform', `translate(${margin.left},0)`)\n            .call(d3.axisLeft(y).ticks(null, 's'));\n\n        render(svg, [\n          {\n            append: 'g',\n            fill: 'var(--colour-primary)',\n            children: data.map((d, i) => {\n              return {\n                append: 'rect',\n                x: margin.left + 1,\n                y:\n                  ((height - margin.top - margin.bottom) / data.length) * i +\n                  margin.top / 2,\n                width:\n                  (d.value / maximum) * (width - margin.left - margin.right),\n                height: (height - margin.top - margin.bottom) / data.length - 1,\n              };\n            }),\n          },\n          {\n            append: 'g',\n            key: width,\n            transform: `translate(0, ${height - margin.bottom})`,\n            call: xAxis,\n          },\n          {\n            append: 'g',\n            call: yAxis,\n          },\n        ]);\n      }\n    }\n  }, [\n    svgNode,\n    data,\n    width,\n    height,\n    margin,\n    id,\n    showValues,\n    direction,\n    rotateXAxis,\n    // hoverIndex,\n    renderLine,\n  ]);\n\n  return (\n    <svg\n      ref={svgRef}\n      width={width}\n      height={height}\n      id={id}\n      className={[css.lineChart, className || ''].join(' ')}\n      {...restProps}\n    />\n  );\n};\n\nLineChart.propTypes = {\n  className: PropTypes.string,\n};\n\nexport default LineChart;\n"]},"metadata":{},"sourceType":"module"}