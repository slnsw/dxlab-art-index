{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/luked/Documents/slnsw/dxlab-art-index/components/HierarchyColumnBrowser/HierarchyColumnBrowser.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport * as React from 'react';\nimport { transformFlatToLists } from './hierarchyUtils'; // import { useKeyPressCallback } from '../../lib/hooks';\n// import { hashDep } from '../../lib';\n// import Loader from '../Loader';\n\nimport HierarchyBrowserList from './HierarchyColumnBrowserList'; // import { HierarchyBrowserItem } from '../../types/hierarchyTypes';\n\nimport css from './HierarchyColumnBrowser.module.scss';\n\nvar HierarchyBrowser = function HierarchyBrowser(_ref) {\n  _s();\n\n  var _ref$items = _ref.items,\n      items = _ref$items === void 0 ? [] : _ref$items,\n      originId = _ref.originId,\n      _ref$rowHeight = _ref.rowHeight,\n      rowHeight = _ref$rowHeight === void 0 ? 80 : _ref$rowHeight,\n      colWidth = _ref.colWidth,\n      className = _ref.className,\n      listInfoComponent = _ref.listInfoComponent,\n      rowComponent = _ref.rowComponent,\n      listPreviewComponent = _ref.listPreviewComponent,\n      onChange = _ref.onChange,\n      onRowsRendered = _ref.onRowsRendered,\n      onScroll = _ref.onScroll;\n\n  var _React$useState = React.useState(originId),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      selectedId = _React$useState2[0],\n      setSelectedId = _React$useState2[1];\n\n  var _React$useState3 = React.useState(false),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      isMounted = _React$useState4[0],\n      setIsMounted = _React$useState4[1];\n\n  var containerRef = React.useRef(null);\n  var listsRef = React.useRef([]); // console.log(selectedId);\n  // Cache 'lists' and only transform if items or selectedId changes\n\n  var lists = React.useMemo(function () {\n    return transformFlatToLists(items, selectedId);\n  }, [// hashDep(items),\n  items, selectedId]); // Derive selected item and list\n\n  var _getSelectedInfo = getSelectedInfo(lists, selectedId),\n      selectedItem = _getSelectedInfo.selectedItem; // Reduce jumpiness of horizontal scrolling with some extra blank lists\n\n\n  var _React$useState5 = React.useState(lists.length),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      maxLists = _React$useState6[0],\n      setMaxLists = _React$useState6[1];\n\n  var blankListTotal = maxLists - lists.length <= 0 ? 0 : maxLists - lists.length;\n  React.useEffect(function () {\n    /**\n     * Update length of listsRef whenever lists changes\n     */\n    listsRef.current = listsRef.current.slice(0, lists.length);\n    /**\n     * Update maxLists if new list total is greater\n     * Reduces horizontal jumpiness\n     */\n\n    if (lists.length > maxLists) {\n      setMaxLists(lists.length);\n    }\n  }, [// hashDep(lists),\n  maxLists, lists]);\n  var selectedItemId = selectedItem && selectedItem.id || null;\n  /**\n   * Scroll list into view\n   * TODO: Only scroll if selectedList partially not in view\n   */\n\n  React.useEffect(function () {\n    if (listsRef.current) {\n      var selectedList = listsRef.current[listsRef.current.length - 1];\n\n      if (selectedList) {\n        selectedList.scrollIntoView({\n          // 'smooth' doesn't work on first mount for some reason\n          behavior: isMounted ? 'smooth' : 'auto',\n          inline: 'end'\n        });\n        setIsMounted(true);\n      }\n    }\n  }, [selectedItemId, lists.length, isMounted]); // useKeyPressCallback(\n  //   'ArrowLeft',\n  //   (event) => {\n  //     if (selectedItem) {\n  //       const {\n  //         selectedItem: parentItem,\n  //         selectedRowIndex: parentRowIndex,\n  //         selectedListIndex: parentListIndex,\n  //       } = getSelectedInfo(lists, selectedItem.parentId);\n  //       handleChange(event, {\n  //         item: parentItem,\n  //         rowIndex: parentRowIndex,\n  //         listIndex: parentListIndex,\n  //       });\n  //     }\n  //   },\n  //   [selectedItem],\n  // );\n  // TODO: Not quite working yet. Issue with focus on children list\n  // useKeyPressCallback(\n  //   'ArrowRight',\n  //   (event) => {\n  //     const totalLists = lists.length;\n  //     const hasChildren = selectedListIndex + 1 < totalLists;\n  //     if (hasChildren) {\n  //       const childListIndex = totalLists - 1;\n  //       const childItem = lists[childListIndex][0];\n  //       const childRowIndex = 0;\n  //       handleChange(event, {\n  //         item: childItem,\n  //         rowIndex: childRowIndex,\n  //         listIndex: childListIndex,\n  //       });\n  //     }\n  //   },\n  //   [lists],\n  // );\n\n  /**\n   * Change selectedId, causing lists to rebuild\n   * Also sends changes to outside of the component for data updates\n   */\n\n  var handleChange = function handleChange(event, _ref2) {\n    var item = _ref2.item,\n        rowIndex = _ref2.rowIndex,\n        listIndex = _ref2.listIndex;\n    setSelectedId(item.id);\n\n    if (typeof onChange === 'function') {\n      onChange(event, {\n        item: item,\n        rowIndex: rowIndex,\n        listIndex: listIndex\n      });\n    }\n  };\n\n  var ListPreviewComponent;\n\n  if (typeof listPreviewComponent === 'function') {\n    ListPreviewComponent = listPreviewComponent;\n  } else {\n    ListPreviewComponent = __jsx(\"p\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 28\n      }\n    }, \"No children\");\n  }\n\n  return __jsx(\"div\", {\n    className: [css.hierarchyBrowser, className || ''].join(' '),\n    ref: containerRef,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 5\n    }\n  }, lists.map(function (listItems, index) {\n    var defaultScrollToIndex = listItems.findIndex(function (listItem) {\n      return listItem.isSelected;\n    });\n    var isListSelected = checkIsListSelected(listItems, selectedId);\n    var isLoading = checkIsLoading(listItems);\n    var isListPreview = checkIsListPreview(listItems);\n    var colWidthCss = typeof colWidth === 'function' && colWidth({\n      listItems: listItems,\n      index: index\n    }) ? css.thinList : css.list;\n    return __jsx(\"div\", {\n      className: colWidthCss,\n      key: index,\n      ref: function ref(el) {\n        listsRef.current[index] = el;\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 11\n      }\n    }, function () {\n      if (isLoading) {\n        // return <Loader isLoading={true} className={css.loader} />;\n        return 'Loader';\n      }\n\n      if (isListPreview) {\n        return __jsx(ListPreviewComponent, {\n          item: selectedItem,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 203,\n            columnNumber: 24\n          }\n        });\n      }\n\n      return __jsx(HierarchyBrowserList, {\n        items: listItems,\n        index: index,\n        originId: originId,\n        rowHeight: rowHeight,\n        isListSelected: isListSelected,\n        defaultScrollToIndex: defaultScrollToIndex,\n        key: index,\n        listInfoComponent: listInfoComponent,\n        rowComponent: rowComponent,\n        onChange: handleChange,\n        onRowsRendered: onRowsRendered,\n        onScroll: onScroll,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 17\n        }\n      });\n    }());\n  }), _toConsumableArray(Array(blankListTotal)).map(function (_, index) {\n    return __jsx(\"div\", {\n      key: index,\n      className: css.list,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 16\n      }\n    });\n  }));\n};\n\n_s(HierarchyBrowser, \"1xmJzosZXbRJ6yokCFfqLfWR41o=\");\n\n_c = HierarchyBrowser;\n\nfunction getSelectedInfo(lists, selectedId) {\n  var selectedListIndex;\n  var selectedRowIndex;\n  var selectedItem;\n  lists.forEach(function (list, listIndex) {\n    var itemFound = list.find(function (item, rowIndex) {\n      if (item.id === selectedId) {\n        selectedRowIndex = rowIndex;\n        selectedItem = item;\n      }\n\n      return item.id === selectedId;\n    });\n\n    if (itemFound) {\n      selectedListIndex = listIndex;\n    }\n  });\n  return {\n    selectedListIndex: selectedListIndex,\n    selectedItem: selectedItem,\n    selectedRowIndex: selectedRowIndex\n  };\n}\n\nvar checkIsListSelected = function checkIsListSelected(listItems, selectedId) {\n  return listItems.findIndex(function (listItem) {\n    return listItem.id === selectedId;\n  }) >= 0;\n};\n\nvar checkIsLoading = function checkIsLoading(listItems) {\n  return listItems.findIndex(function (listItem) {\n    return listItem.type === 'loader';\n  }) >= 0;\n};\n\nvar checkIsListPreview = function checkIsListPreview(listItems) {\n  return listItems.findIndex(function (listItem) {\n    return listItem.type === 'listPreview';\n  }) >= 0;\n};\n\nexport default HierarchyBrowser;\n\nvar _c;\n\n$RefreshReg$(_c, \"HierarchyBrowser\");","map":{"version":3,"sources":["/Users/luked/Documents/slnsw/dxlab-art-index/components/HierarchyColumnBrowser/HierarchyColumnBrowser.tsx"],"names":["React","transformFlatToLists","HierarchyBrowserList","css","HierarchyBrowser","items","originId","rowHeight","colWidth","className","listInfoComponent","rowComponent","listPreviewComponent","onChange","onRowsRendered","onScroll","useState","selectedId","setSelectedId","isMounted","setIsMounted","containerRef","useRef","listsRef","lists","useMemo","getSelectedInfo","selectedItem","length","maxLists","setMaxLists","blankListTotal","useEffect","current","slice","selectedItemId","id","selectedList","scrollIntoView","behavior","inline","handleChange","event","item","rowIndex","listIndex","ListPreviewComponent","hierarchyBrowser","join","map","listItems","index","defaultScrollToIndex","findIndex","listItem","isSelected","isListSelected","checkIsListSelected","isLoading","checkIsLoading","isListPreview","checkIsListPreview","colWidthCss","thinList","list","el","Array","_","selectedListIndex","selectedRowIndex","forEach","itemFound","find","type"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { transformFlatToLists } from './hierarchyUtils';\n// import { useKeyPressCallback } from '../../lib/hooks';\n// import { hashDep } from '../../lib';\n\n// import Loader from '../Loader';\nimport HierarchyBrowserList from './HierarchyColumnBrowserList';\n\n// import { HierarchyBrowserItem } from '../../types/hierarchyTypes';\n\nimport css from './HierarchyColumnBrowser.module.scss';\n\ntype Props = {\n  /** Flattened items that HierarchyBrowser builds lists from */\n  // items: HierarchyBrowserItem;\n  items: any[];\n  originId: string;\n  rowHeight?: number | Function;\n  colWidth?: Function; // function should return TRUE if column is to use 'thin col' css\n  className?: string;\n  listInfoComponent?: React.ReactNode;\n  rowComponent?: React.ReactNode;\n  listPreviewComponent?: React.ReactNode;\n  onChange?: Function;\n  onRowsRendered?: Function;\n  onScroll?: Function;\n};\n\nconst HierarchyBrowser: React.FunctionComponent<Props> = ({\n  items = [],\n  originId,\n  rowHeight = 80,\n  colWidth,\n  className,\n  listInfoComponent,\n  rowComponent,\n  listPreviewComponent,\n  onChange,\n  onRowsRendered,\n  onScroll,\n}) => {\n  const [selectedId, setSelectedId] = React.useState(originId);\n  const [isMounted, setIsMounted] = React.useState(false);\n  const containerRef = React.useRef(null);\n  const listsRef = React.useRef([]);\n\n  // console.log(selectedId);\n\n  // Cache 'lists' and only transform if items or selectedId changes\n  const lists = React.useMemo(() => transformFlatToLists(items, selectedId), [\n    // hashDep(items),\n    items,\n    selectedId,\n  ]);\n\n  // Derive selected item and list\n  const {\n    selectedItem,\n    // selectedListIndex\n  } = getSelectedInfo(lists, selectedId);\n\n  // Reduce jumpiness of horizontal scrolling with some extra blank lists\n  const [maxLists, setMaxLists] = React.useState(lists.length);\n  const blankListTotal =\n    maxLists - lists.length <= 0 ? 0 : maxLists - lists.length;\n\n  React.useEffect(() => {\n    /**\n     * Update length of listsRef whenever lists changes\n     */\n    listsRef.current = listsRef.current.slice(0, lists.length);\n\n    /**\n     * Update maxLists if new list total is greater\n     * Reduces horizontal jumpiness\n     */\n    if (lists.length > maxLists) {\n      setMaxLists(lists.length);\n    }\n  }, [\n    // hashDep(lists),\n    maxLists,\n    lists,\n  ]);\n\n  const selectedItemId = (selectedItem && selectedItem.id) || null;\n\n  /**\n   * Scroll list into view\n   * TODO: Only scroll if selectedList partially not in view\n   */\n  React.useEffect(() => {\n    if (listsRef.current) {\n      const selectedList = listsRef.current[listsRef.current.length - 1];\n\n      if (selectedList) {\n        selectedList.scrollIntoView({\n          // 'smooth' doesn't work on first mount for some reason\n          behavior: isMounted ? 'smooth' : 'auto',\n          inline: 'end',\n        });\n\n        setIsMounted(true);\n      }\n    }\n  }, [selectedItemId, lists.length, isMounted]);\n\n  // useKeyPressCallback(\n  //   'ArrowLeft',\n  //   (event) => {\n  //     if (selectedItem) {\n  //       const {\n  //         selectedItem: parentItem,\n  //         selectedRowIndex: parentRowIndex,\n  //         selectedListIndex: parentListIndex,\n  //       } = getSelectedInfo(lists, selectedItem.parentId);\n\n  //       handleChange(event, {\n  //         item: parentItem,\n  //         rowIndex: parentRowIndex,\n  //         listIndex: parentListIndex,\n  //       });\n  //     }\n  //   },\n  //   [selectedItem],\n  // );\n\n  // TODO: Not quite working yet. Issue with focus on children list\n  // useKeyPressCallback(\n  //   'ArrowRight',\n  //   (event) => {\n  //     const totalLists = lists.length;\n  //     const hasChildren = selectedListIndex + 1 < totalLists;\n\n  //     if (hasChildren) {\n  //       const childListIndex = totalLists - 1;\n  //       const childItem = lists[childListIndex][0];\n  //       const childRowIndex = 0;\n\n  //       handleChange(event, {\n  //         item: childItem,\n  //         rowIndex: childRowIndex,\n  //         listIndex: childListIndex,\n  //       });\n  //     }\n  //   },\n  //   [lists],\n  // );\n\n  /**\n   * Change selectedId, causing lists to rebuild\n   * Also sends changes to outside of the component for data updates\n   */\n  const handleChange = (event, { item, rowIndex, listIndex }) => {\n    setSelectedId(item.id);\n\n    if (typeof onChange === 'function') {\n      onChange(event, { item, rowIndex, listIndex });\n    }\n  };\n\n  let ListPreviewComponent;\n\n  if (typeof listPreviewComponent === 'function') {\n    ListPreviewComponent = listPreviewComponent;\n  } else {\n    ListPreviewComponent = <p>No children</p>;\n  }\n\n  return (\n    <div\n      className={[css.hierarchyBrowser, className || ''].join(' ')}\n      ref={containerRef}\n    >\n      {lists.map((listItems, index) => {\n        const defaultScrollToIndex = listItems.findIndex((listItem) => {\n          return listItem.isSelected;\n        });\n\n        const isListSelected = checkIsListSelected(listItems, selectedId);\n        const isLoading = checkIsLoading(listItems);\n        const isListPreview = checkIsListPreview(listItems);\n        const colWidthCss =\n          typeof colWidth === 'function' && colWidth({ listItems, index })\n            ? css.thinList\n            : css.list;\n\n        return (\n          <div\n            className={colWidthCss}\n            key={index}\n            ref={(el) => {\n              listsRef.current[index] = el;\n            }}\n          >\n            {(() => {\n              if (isLoading) {\n                // return <Loader isLoading={true} className={css.loader} />;\n                return 'Loader';\n              }\n\n              if (isListPreview) {\n                return <ListPreviewComponent item={selectedItem} />;\n              }\n\n              return (\n                <HierarchyBrowserList\n                  items={listItems}\n                  index={index}\n                  originId={originId}\n                  rowHeight={rowHeight}\n                  isListSelected={isListSelected}\n                  defaultScrollToIndex={defaultScrollToIndex}\n                  key={index}\n                  listInfoComponent={listInfoComponent}\n                  rowComponent={rowComponent}\n                  onChange={handleChange}\n                  onRowsRendered={onRowsRendered}\n                  onScroll={onScroll}\n                />\n              );\n            })()}\n          </div>\n        );\n      })}\n\n      {/**\n       * Pad out the right side with blank lists to prevent horizontal scroll\n       * jumps\n       */}\n      {[...Array(blankListTotal)].map((_, index) => {\n        return <div key={index} className={css.list}></div>;\n      })}\n    </div>\n  );\n};\n\nfunction getSelectedInfo(lists, selectedId) {\n  let selectedListIndex;\n  let selectedRowIndex;\n  let selectedItem;\n\n  lists.forEach((list, listIndex) => {\n    const itemFound = list.find((item, rowIndex) => {\n      if (item.id === selectedId) {\n        selectedRowIndex = rowIndex;\n        selectedItem = item;\n      }\n\n      return item.id === selectedId;\n    });\n\n    if (itemFound) {\n      selectedListIndex = listIndex;\n    }\n  });\n\n  return { selectedListIndex, selectedItem, selectedRowIndex };\n}\n\nconst checkIsListSelected = (listItems, selectedId) => {\n  return (\n    listItems.findIndex((listItem) => {\n      return listItem.id === selectedId;\n    }) >= 0\n  );\n};\n\nconst checkIsLoading = (listItems) => {\n  return (\n    listItems.findIndex((listItem) => {\n      return listItem.type === 'loader';\n    }) >= 0\n  );\n};\n\nconst checkIsListPreview = (listItems) => {\n  return (\n    listItems.findIndex((listItem) => {\n      return listItem.type === 'listPreview';\n    }) >= 0\n  );\n};\n\nexport default HierarchyBrowser;\n"]},"metadata":{},"sourceType":"module"}