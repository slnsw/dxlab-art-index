{"ast":null,"code":"var _jsxFileName = \"/Users/luked/Documents/slnsw/dxlab-art-index/components/DonutChart/DonutChart.tsx\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport * as d3 from 'd3';\nimport useDimensions from '../../lib/hooks/use-dimensions';\nimport css from './DonutChart.module.scss';\n\n// Donut chart based on this example\n// https://observablehq.com/@teebusch/d3-for-the-impatient-part-ii\nconst DonutChart = ({\n  data = [],\n  height = 200,\n  padding = 50,\n  padAngle = 0.02,\n  innerRadiusRatio = 0.8,\n  colours = ['var(--colour-pink)', 'var(--colour-hyper-green)'],\n  className,\n  renderLabelText = d => d.data.name\n}) => {\n  const [svgRef, dimensions, svgNode] = useDimensions();\n  const {\n    width\n  } = dimensions;\n  const g = React.useRef();\n  React.useEffect(() => {\n    if (svgNode) {\n      const svg = d3.select(svgNode);\n\n      if (!g.current) {\n        g.current = svg.append('g');\n      }\n    }\n  }, [svgNode]);\n  React.useEffect(() => {\n    if (g.current) {\n      g.current.attr('transform', `translate(${width / 2}, ${height / 2})`);\n    }\n  }, [width, height]);\n  React.useEffect(() => {\n    if (!g.current) {\n      return () => {\n        return null;\n      };\n    }\n\n    const pie = d3.pie().value(d => d.value) // .sortValues( (a,b) => a - b ) // sort by value, looks silly with transition\n    .sort(null) // keep default order\n    // .startAngle(1.5 * Math.PI)\n    // .endAngle(2.5 * Math.PI)\n    .padAngle(padAngle); // padding\n    // Ordinal scales look up objects by their string representation.\n    // toString() does not return a unique identifier for an object,\n    // so we have to choose a uniquely identifying member of each element.\n\n    const scC = d3.scaleOrdinal(colours).domain(pie(data).map(d => d.data.name)); // Store the displayed angles in .current.\n    // Then, interpolate from .current to the new angles.\n    // During the transition, .current is updated in-place by d3.interpolate.\n    // https://bl.ocks.org/HarryStevens/e1acaf628b1693f1b32e5f2e1a7f73fb\n\n    function arcTween(a) {\n      const i = d3.interpolate(this.current, a);\n      this.current = i(0);\n      return t => {\n        return arc(i(t));\n      };\n    }\n\n    const arc = d3.arc().innerRadius((height / 2 - padding) * innerRadiusRatio).outerRadius(height / 2 - padding).cornerRadius(1);\n    const arcLabels = d3.arc().innerRadius(height / 2 - padding).outerRadius(height / 2).cornerRadius(1);\n\n    function labelX(d) {\n      const xc = arcLabels.centroid(d)[0];\n      const {\n        width: boxWidth\n      } = this.getBBox();\n      const w = boxWidth < 60 ? 60 : boxWidth; // before rendering the element, the bounding box is 0. use 60 as default\n\n      let offset;\n\n      if (Math.abs(xc) > 50) {\n        offset = xc > 0 ? w / 2 : -w / 2;\n      } else {\n        offset = 0;\n      }\n\n      const out = xc + offset < 0 ? xc + offset - 3 : xc + offset + 3;\n      return out;\n    }\n\n    function redraw(newData) {\n      // pie\n      const donut = g.current.selectAll('path').data(pie(newData), d => d.data.name); // update\n\n      donut.transition().duration(500).attrTween('d', arcTween); // enter\n\n      donut.enter().append('path').attr('fill', d => scC(d.index)) // .attr('stroke', (d) => d3.color(scC(d.index)).darker())\n      .attr('d', arc) // invoke arkGenerator on each element of the pie layout\n      .each(function setCurrent(d) {\n        this.current = d;\n      }); // starting point for the first transition\n      // labels\n\n      const labels = g.current.selectAll('text').data(pie(data), renderLabelText); // update\n\n      labels.transition().duration(500).attr('x', labelX).attr('y', d => arcLabels.centroid(d)[1]); // enter\n\n      labels.enter().append('text').text(renderLabelText).attr('pointer-events', 'none').attr('alignment-baseline', 'central').attr('font-family', 'sans-serif').attr('font-size', 12).attr('fill', 'var(--colour-grey)') // .attr('fill', (d) => d3.color(scC(d.index)).darker())\n      .attr('text-anchor', 'middle').attr('x', labelX).attr('y', d => arcLabels.centroid(d)[1]);\n    }\n\n    redraw(data);\n  }, [data, width, height, padAngle, padding, innerRadiusRatio, colours, renderLabelText]);\n  return __jsx(\"svg\", {\n    className: [css.donutChart, className || ''].join(' '),\n    width: \"100%\",\n    height: height,\n    ref: svgRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 5\n    }\n  });\n};\n\nexport default DonutChart;","map":{"version":3,"sources":["/Users/luked/Documents/slnsw/dxlab-art-index/components/DonutChart/DonutChart.tsx"],"names":["React","d3","useDimensions","css","DonutChart","data","height","padding","padAngle","innerRadiusRatio","colours","className","renderLabelText","d","name","svgRef","dimensions","svgNode","width","g","useRef","useEffect","svg","select","current","append","attr","pie","value","sort","scC","scaleOrdinal","domain","map","arcTween","a","i","interpolate","t","arc","innerRadius","outerRadius","cornerRadius","arcLabels","labelX","xc","centroid","boxWidth","getBBox","w","offset","Math","abs","out","redraw","newData","donut","selectAll","transition","duration","attrTween","enter","index","each","setCurrent","labels","text","donutChart","join"],"mappings":"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","sourcesContent":["import React from 'react';\nimport * as d3 from 'd3';\n\nimport useDimensions from '../../lib/hooks/use-dimensions';\n\nimport css from './DonutChart.module.scss';\n\ntype Props = {\n  data: {\n    name: string | number;\n    value: number;\n    [key: string]: string | number;\n  }[];\n  height?: number;\n  padding?: number;\n  padAngle?: number | Function;\n  innerRadiusRatio?: number;\n  colours?: string[];\n  className?: string;\n  renderLabelText?: Function;\n};\n\n// Donut chart based on this example\n// https://observablehq.com/@teebusch/d3-for-the-impatient-part-ii\n\nconst DonutChart: React.FC<Props> = ({\n  data = [],\n  height = 200,\n  padding = 50,\n  padAngle = 0.02,\n  innerRadiusRatio = 0.8,\n  colours = ['var(--colour-pink)', 'var(--colour-hyper-green)'],\n  className,\n  renderLabelText = (d) => d.data.name,\n}) => {\n  const [svgRef, dimensions, svgNode] = useDimensions();\n  const { width } = dimensions;\n\n  const g = React.useRef<{\n    attr: Function;\n    selectAll: Function;\n  }>();\n\n  React.useEffect(() => {\n    if (svgNode) {\n      const svg = d3.select(svgNode);\n\n      if (!g.current) {\n        g.current = svg.append('g');\n      }\n    }\n  }, [svgNode]);\n\n  React.useEffect(() => {\n    if (g.current) {\n      g.current.attr('transform', `translate(${width / 2}, ${height / 2})`);\n    }\n  }, [width, height]);\n\n  React.useEffect(() => {\n    if (!g.current) {\n      return () => {\n        return null;\n      };\n    }\n\n    const pie = d3\n      .pie()\n      .value((d) => d.value)\n      // .sortValues( (a,b) => a - b ) // sort by value, looks silly with transition\n      .sort(null) // keep default order\n      // .startAngle(1.5 * Math.PI)\n      // .endAngle(2.5 * Math.PI)\n      .padAngle(padAngle); // padding\n\n    // Ordinal scales look up objects by their string representation.\n    // toString() does not return a unique identifier for an object,\n    // so we have to choose a uniquely identifying member of each element.\n    const scC = d3\n      .scaleOrdinal(colours)\n      .domain(pie(data).map((d) => d.data.name));\n\n    // Store the displayed angles in .current.\n    // Then, interpolate from .current to the new angles.\n    // During the transition, .current is updated in-place by d3.interpolate.\n    // https://bl.ocks.org/HarryStevens/e1acaf628b1693f1b32e5f2e1a7f73fb\n    function arcTween(a) {\n      const i = d3.interpolate(this.current, a);\n      this.current = i(0);\n      return (t) => {\n        return arc(i(t));\n      };\n    }\n\n    const arc = d3\n      .arc()\n      .innerRadius((height / 2 - padding) * innerRadiusRatio)\n      .outerRadius(height / 2 - padding)\n      .cornerRadius(1);\n\n    const arcLabels = d3\n      .arc()\n      .innerRadius(height / 2 - padding)\n      .outerRadius(height / 2)\n      .cornerRadius(1);\n\n    function labelX(d) {\n      const xc = arcLabels.centroid(d)[0];\n\n      const { width: boxWidth } = this.getBBox();\n      const w = boxWidth < 60 ? 60 : boxWidth; // before rendering the element, the bounding box is 0. use 60 as default\n      let offset;\n\n      if (Math.abs(xc) > 50) {\n        offset = xc > 0 ? w / 2 : -w / 2;\n      } else {\n        offset = 0;\n      }\n      const out = xc + offset < 0 ? xc + offset - 3 : xc + offset + 3;\n      return out;\n    }\n\n    function redraw(newData) {\n      // pie\n      const donut = g.current\n        .selectAll('path')\n        .data(pie(newData), (d) => d.data.name);\n\n      // update\n      donut.transition().duration(500).attrTween('d', arcTween);\n\n      // enter\n      donut\n        .enter()\n        .append('path')\n        .attr('fill', (d) => scC(d.index))\n        // .attr('stroke', (d) => d3.color(scC(d.index)).darker())\n        .attr('d', arc) // invoke arkGenerator on each element of the pie layout\n        .each(function setCurrent(d) {\n          this.current = d;\n        }); // starting point for the first transition\n\n      // labels\n      const labels = g.current\n        .selectAll('text')\n        .data(pie(data), renderLabelText);\n\n      // update\n      labels\n        .transition()\n        .duration(500)\n        .attr('x', labelX)\n        .attr('y', (d) => arcLabels.centroid(d)[1]);\n\n      // enter\n      labels\n        .enter()\n        .append('text')\n        .text(renderLabelText)\n        .attr('pointer-events', 'none')\n        .attr('alignment-baseline', 'central')\n        .attr('font-family', 'sans-serif')\n        .attr('font-size', 12)\n        .attr('fill', 'var(--colour-grey)')\n        // .attr('fill', (d) => d3.color(scC(d.index)).darker())\n        .attr('text-anchor', 'middle')\n        .attr('x', labelX)\n        .attr('y', (d) => arcLabels.centroid(d)[1]);\n    }\n\n    redraw(data);\n  }, [\n    data,\n    width,\n    height,\n    padAngle,\n    padding,\n    innerRadiusRatio,\n    colours,\n    renderLabelText,\n  ]);\n\n  return (\n    <svg\n      className={[css.donutChart, className || ''].join(' ')}\n      width=\"100%\"\n      height={height}\n      ref={svgRef}\n    ></svg>\n  );\n};\n\nexport default DonutChart;\n"]},"metadata":{},"sourceType":"module"}