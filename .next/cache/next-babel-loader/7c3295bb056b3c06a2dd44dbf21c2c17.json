{"ast":null,"code":"var _jsxFileName = \"/Users/luked/Documents/slnsw/dxlab-art-index/components/BarChart/BarChart.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport * as d3 from 'd3';\nimport render from 'd3-render';\nimport useDimensions from '../../lib/hooks/use-dimensions';\nimport css from './BarChart.module.scss';\n/* ========\n\nThis component creates a bar chart.\n\nData is expected to be an array of objects, each\ncontaining 'name' for each bar and 'value' for its height.\n\n========= */\n\nconst defaultMargin = {\n  top: 10,\n  left: 40,\n  right: 10,\n  bottom: 20\n};\n\nconst BarChart = (_ref) => {\n  let {\n    data = [],\n    // width: propWidth,\n    height = 200,\n    margin: newMargin = defaultMargin,\n    direction = 'vertical',\n    rotateXAxis = false,\n    showValues = false,\n    renderBar,\n    xAxisTickIncrement = 1,\n    xAxisTickValuesNumeric = false,\n    id = 'bar-chart',\n    className\n  } = _ref,\n      restProps = _objectWithoutProperties(_ref, [\"data\", \"height\", \"margin\", \"direction\", \"rotateXAxis\", \"showValues\", \"renderBar\", \"xAxisTickIncrement\", \"xAxisTickValuesNumeric\", \"id\", \"className\"]);\n\n  const [hoverIndex, setHoverIndex] = React.useState(null);\n  const [svgRef, dimensions, svgNode] = useDimensions();\n  const {\n    width\n  } = dimensions;\n\n  const margin = _objectSpread(_objectSpread({}, defaultMargin), newMargin);\n\n  React.useEffect(() => {\n    if (svgNode && data.length > 0 && width) {\n      let x;\n      let y;\n      let xAxis;\n      let yAxis;\n      const maximum = d3.max(data, d => d.value);\n      const svg = d3.select(svgNode);\n\n      if (direction === 'vertical') {\n        x = d3.scaleBand().domain(d3.range(data.length)).range([margin.left, width - margin.right]).padding(0.1);\n        y = d3.scaleLinear().domain([0, d3.max(data, d => d.value)]).nice().range([height - margin.bottom, margin.top]);\n        xAxis = d3.axisBottom(x).tickFormat(i => data[i].name).tickSizeOuter(0);\n\n        yAxis = g => g.attr('transform', `translate(${margin.left + 1},0)`).call(d3.axisLeft(y).ticks(null, 's')).call(selection => selection.select('.domain').remove());\n\n        render(svg, [{\n          append: 'g',\n          fill: 'var(--colour-primary)',\n          children: data.map((d, i) => {\n            return {\n              append: 'g',\n              children: [_objectSpread({\n                append: 'rect',\n                x: x(i),\n                y: y(d.value),\n                width: x.bandwidth(),\n                height: y(0) - y(d.value),\n                onMouseOver: () => {\n                  setHoverIndex(i);\n                },\n                onMouseOut: () => {\n                  setHoverIndex(null);\n                }\n              }, typeof renderBar === 'function' ? renderBar(d, i) : {})]\n            };\n          })\n        }, {\n          // doing values in separate loop so they are 'on top'\n          append: 'g',\n          children: data.map((d, i) => {\n            const isHovered = i === hoverIndex;\n            return {\n              append: 'g',\n              children: [{\n                append: 'text',\n                class: 'values',\n                key: `${isHovered}`,\n                text: showValues || isHovered ? d.value : '',\n                x: x(i) + x.bandwidth() / 2,\n                y: y(d.value) - 6,\n                style: {\n                  fill: 'white',\n                  textAnchor: 'middle'\n                }\n              }]\n            };\n          })\n        }, {\n          append: 'g',\n          class: 'x-axis',\n          // key: width,\n          key: Date.now(),\n          transform: `translate(0, ${height - margin.bottom})`,\n          call: xAxis\n        }, {\n          append: 'g',\n          call: yAxis\n        }]);\n\n        if (rotateXAxis) {\n          d3.selectAll(`#${id} .x-axis text`).style('text-anchor', 'end').attr('dx', '-1em').attr('dy', '-.5em').attr('transform', 'rotate(-90)');\n        }\n\n        if (xAxisTickIncrement) {\n          d3.selectAll(`#${id} .x-axis .tick`).attr('visibility', t => {\n            var _data$t;\n\n            const tickVal = xAxisTickValuesNumeric ? parseInt((_data$t = data[t]) === null || _data$t === void 0 ? void 0 : _data$t.name, 10) : t;\n            return tickVal % xAxisTickIncrement === 0 || t === data.length - 1 || t === 0 ? 'visible' : 'hidden';\n          });\n        }\n      } else {\n        y = d3.scaleOrdinal().domain(data.map(d => d.name)).range(data.map((_, i) => (height - margin.top - margin.bottom) / data.length * i + margin.top));\n        x = d3.scaleLinear().domain([0, d3.max(data, d => d.value)]).range([margin.left, width - margin.right]);\n        xAxis = d3.axisBottom(x);\n\n        yAxis = g => g.attr('transform', `translate(${margin.left},0)`).call(d3.axisLeft(y).ticks(null, 's'));\n\n        render(svg, [{\n          append: 'g',\n          fill: 'var(--colour-primary)',\n          children: data.map((d, i) => {\n            return {\n              append: 'rect',\n              x: margin.left + 1,\n              y: (height - margin.top - margin.bottom) / data.length * i + margin.top / 2,\n              width: d.value / maximum * (width - margin.left - margin.right),\n              height: (height - margin.top - margin.bottom) / data.length - 1\n            };\n          })\n        }, {\n          append: 'g',\n          key: width,\n          transform: `translate(0, ${height - margin.bottom})`,\n          call: xAxis\n        }, {\n          append: 'g',\n          call: yAxis\n        }]);\n      }\n    }\n  }, [svgNode, data, width, height, margin, id, showValues, direction, rotateXAxis, xAxisTickIncrement, xAxisTickValuesNumeric, hoverIndex, renderBar]);\n  return __jsx(\"svg\", _extends({\n    ref: svgRef,\n    width: width,\n    height: height,\n    id: id,\n    className: [css.barChart, className || ''].join(' ')\n  }, restProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 5\n    }\n  }));\n};\n\nBarChart.propTypes = {\n  className: PropTypes.string\n};\nexport default BarChart;","map":{"version":3,"sources":["/Users/luked/Documents/slnsw/dxlab-art-index/components/BarChart/BarChart.tsx"],"names":["React","PropTypes","d3","render","useDimensions","css","defaultMargin","top","left","right","bottom","BarChart","data","height","margin","newMargin","direction","rotateXAxis","showValues","renderBar","xAxisTickIncrement","xAxisTickValuesNumeric","id","className","restProps","hoverIndex","setHoverIndex","useState","svgRef","dimensions","svgNode","width","useEffect","length","x","y","xAxis","yAxis","maximum","max","d","value","svg","select","scaleBand","domain","range","padding","scaleLinear","nice","axisBottom","tickFormat","i","name","tickSizeOuter","g","attr","call","axisLeft","ticks","selection","remove","append","fill","children","map","bandwidth","onMouseOver","onMouseOut","isHovered","class","key","text","style","textAnchor","Date","now","transform","selectAll","t","tickVal","parseInt","scaleOrdinal","_","barChart","join","propTypes","string"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport * as d3 from 'd3';\nimport render from 'd3-render';\n\nimport useDimensions from '../../lib/hooks/use-dimensions';\n\nimport css from './BarChart.module.scss';\n\n/* ========\n\nThis component creates a bar chart.\n\nData is expected to be an array of objects, each\ncontaining 'name' for each bar and 'value' for its height.\n\n========= */\n\ntype Props = {\n  data: {\n    name: string;\n    value: number;\n  }[];\n  height?: number;\n  margin?: {\n    top?: number;\n    left?: number;\n    right?: number;\n    bottom?: number;\n  };\n  direction?: 'vertical' | 'horizontal';\n  rotateXAxis?: boolean;\n  showValues?: boolean;\n  renderBar?: Function;\n  xAxisTickIncrement?: number; // if set to say N, axis shows only every Nth tick:\n  // eg if n=5 it will show 1955, 1960, 1965 etc BUT it assumes the values for the\n  // tick names are NUMERIC (even though they come in a strings) so this may break\n  // if they are like states or days of the week etc - thus i've added the following prop\n  xAxisTickValuesNumeric?: boolean; // defaults to FALSE so values of tick labels are not\n  // attempted to be turned into numbers. Actual Nth ticks are shown if xAxisTickIncrement set.\n  // In the case where they are numeric (eg years) set this to true and years which are multiples\n  // of xAxisTickIncrement are only shown. First and last on axis are always shown.\n  id?: string;\n  className?: string;\n};\n\nconst defaultMargin = {\n  top: 10,\n  left: 40,\n  right: 10,\n  bottom: 20,\n};\n\nconst BarChart: React.FC<Props> = ({\n  data = [],\n  // width: propWidth,\n  height = 200,\n  margin: newMargin = defaultMargin,\n  direction = 'vertical',\n  rotateXAxis = false,\n  showValues = false,\n  renderBar,\n  xAxisTickIncrement = 1,\n  xAxisTickValuesNumeric = false,\n  id = 'bar-chart',\n  className,\n  ...restProps\n}) => {\n  const [hoverIndex, setHoverIndex] = React.useState(null);\n  const [svgRef, dimensions, svgNode] = useDimensions();\n  const { width } = dimensions;\n  const margin = {\n    ...defaultMargin,\n    ...newMargin,\n  };\n\n  React.useEffect(() => {\n    if (svgNode && data.length > 0 && width) {\n      let x;\n      let y;\n      let xAxis;\n      let yAxis;\n      const maximum = d3.max(data, (d) => d.value);\n      const svg = d3.select(svgNode);\n\n      if (direction === 'vertical') {\n        x = d3\n          .scaleBand()\n          .domain(d3.range(data.length))\n          .range([margin.left, width - margin.right])\n          .padding(0.1);\n\n        y = d3\n          .scaleLinear()\n          .domain([0, d3.max(data, (d) => d.value)])\n          .nice()\n          .range([height - margin.bottom, margin.top]);\n\n        xAxis = d3\n          .axisBottom(x)\n          .tickFormat((i) => data[i].name)\n          .tickSizeOuter(0);\n\n        yAxis = (g) =>\n          g\n            .attr('transform', `translate(${margin.left + 1},0)`)\n            .call(d3.axisLeft(y).ticks(null, 's'))\n            .call((selection) => selection.select('.domain').remove());\n\n        render(svg, [\n          {\n            append: 'g',\n            fill: 'var(--colour-primary)',\n            children: data.map((d, i) => {\n              return {\n                append: 'g',\n                children: [\n                  {\n                    append: 'rect',\n                    x: x(i),\n                    y: y(d.value),\n                    width: x.bandwidth(),\n                    height: y(0) - y(d.value),\n                    onMouseOver: () => {\n                      setHoverIndex(i);\n                    },\n                    onMouseOut: () => {\n                      setHoverIndex(null);\n                    },\n                    ...(typeof renderBar === 'function' ? renderBar(d, i) : {}),\n                  },\n                ],\n              };\n            }),\n          },\n          {\n            // doing values in separate loop so they are 'on top'\n            append: 'g',\n            children: data.map((d, i) => {\n              const isHovered = i === hoverIndex;\n              return {\n                append: 'g',\n                children: [\n                  {\n                    append: 'text',\n                    class: 'values',\n                    key: `${isHovered}`,\n                    text: showValues || isHovered ? d.value : '',\n                    x: x(i) + x.bandwidth() / 2,\n                    y: y(d.value) - 6,\n                    style: { fill: 'white', textAnchor: 'middle' },\n                  },\n                ],\n              };\n            }),\n          },\n          {\n            append: 'g',\n            class: 'x-axis',\n            // key: width,\n            key: Date.now(),\n            transform: `translate(0, ${height - margin.bottom})`,\n            call: xAxis,\n          },\n          {\n            append: 'g',\n            call: yAxis,\n          },\n        ]);\n\n        if (rotateXAxis) {\n          d3.selectAll(`#${id} .x-axis text`)\n            .style('text-anchor', 'end')\n            .attr('dx', '-1em')\n            .attr('dy', '-.5em')\n            .attr('transform', 'rotate(-90)');\n        }\n        if (xAxisTickIncrement) {\n          d3.selectAll(`#${id} .x-axis .tick`).attr('visibility', (t) => {\n            const tickVal = xAxisTickValuesNumeric\n              ? parseInt(data[t]?.name, 10)\n              : t;\n            return tickVal % xAxisTickIncrement === 0 ||\n              t === data.length - 1 ||\n              t === 0\n              ? 'visible'\n              : 'hidden';\n          });\n        }\n      } else {\n        y = d3\n          .scaleOrdinal()\n          .domain(data.map((d) => d.name))\n          .range(\n            data.map(\n              (_, i) =>\n                ((height - margin.top - margin.bottom) / data.length) * i +\n                margin.top,\n            ),\n          );\n\n        x = d3\n          .scaleLinear()\n          .domain([0, d3.max(data, (d) => d.value)])\n          .range([margin.left, width - margin.right]);\n\n        xAxis = d3.axisBottom(x);\n\n        yAxis = (g) =>\n          g\n            .attr('transform', `translate(${margin.left},0)`)\n            .call(d3.axisLeft(y).ticks(null, 's'));\n\n        render(svg, [\n          {\n            append: 'g',\n            fill: 'var(--colour-primary)',\n            children: data.map((d, i) => {\n              return {\n                append: 'rect',\n                x: margin.left + 1,\n                y:\n                  ((height - margin.top - margin.bottom) / data.length) * i +\n                  margin.top / 2,\n                width:\n                  (d.value / maximum) * (width - margin.left - margin.right),\n                height: (height - margin.top - margin.bottom) / data.length - 1,\n              };\n            }),\n          },\n          {\n            append: 'g',\n            key: width,\n            transform: `translate(0, ${height - margin.bottom})`,\n            call: xAxis,\n          },\n          {\n            append: 'g',\n            call: yAxis,\n          },\n        ]);\n      }\n    }\n  }, [\n    svgNode,\n    data,\n    width,\n    height,\n    margin,\n    id,\n    showValues,\n    direction,\n    rotateXAxis,\n    xAxisTickIncrement,\n    xAxisTickValuesNumeric,\n    hoverIndex,\n    renderBar,\n  ]);\n\n  return (\n    <svg\n      ref={svgRef}\n      width={width}\n      height={height}\n      id={id}\n      className={[css.barChart, className || ''].join(' ')}\n      {...restProps}\n    />\n  );\n};\n\nBarChart.propTypes = {\n  className: PropTypes.string,\n};\n\nexport default BarChart;\n"]},"metadata":{},"sourceType":"module"}