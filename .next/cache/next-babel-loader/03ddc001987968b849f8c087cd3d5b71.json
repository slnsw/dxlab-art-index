{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/luked/Documents/slnsw/dxlab-art-index/components/HierarchyColumnBrowser/HierarchyColumnBrowserList.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport * as React from 'react';\nimport { AutoSizer, List, ArrowKeyStepper } from 'react-virtualized'; // import { HierarchyBrowserRowProps } from '../../types/hierarchyTypes';\n\nimport css from './HierarchyColumnBrowserList.module.scss';\nvar HierarchyBrowserList = /*#__PURE__*/React.forwardRef(_c = _s(function (_ref, ref) {\n  _s();\n\n  var _ref$items = _ref.items,\n      items = _ref$items === void 0 ? [] : _ref$items,\n      index = _ref.index,\n      originId = _ref.originId,\n      _rowHeight = _ref.rowHeight,\n      defaultScrollToIndex = _ref.defaultScrollToIndex,\n      isListSelected = _ref.isListSelected,\n      className = _ref.className,\n      listInfoComponent = _ref.listInfoComponent,\n      rowComponent = _ref.rowComponent,\n      onChange = _ref.onChange,\n      onRowsRendered = _ref.onRowsRendered,\n      onScroll = _ref.onScroll;\n\n  var _React$useState = React.useState(defaultScrollToIndex),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      scrollToIndex = _React$useState2[0],\n      setScrollToIndex = _React$useState2[1];\n\n  var virtualListRef = React.useRef(null); // const { type, totalSiblings } = items[0];\n\n  var type = items[0].type;\n  var ListInfo = typeof listInfoComponent === 'function' ? listInfoComponent : DefaultListInfo; // console.log(items);\n\n  /**\n   * Recompute rowHeights when scrollToIndex changes\n   */\n\n  React.useEffect(function () {\n    if (virtualListRef.current) {\n      // NOTE: be careful as recomputeRowHeights will also cause a scroll to\n      // row which may lead to jumps during infinite scroll\n      virtualListRef.current.recomputeRowHeights();\n    }\n  }, [scrollToIndex]);\n  /**\n   * Handles mouse clicks, keyboard and touch taps, sending changes up\n   */\n\n  var handleChange = function handleChange(event, _ref2) {\n    var item = _ref2.item,\n        rowIndex = _ref2.rowIndex;\n    setScrollToIndex(rowIndex);\n\n    if (typeof onChange === 'function') {\n      onChange(event, {\n        item: item,\n        rowIndex: rowIndex,\n        listIndex: index\n      });\n    }\n  };\n  /**\n   * Send data on visible rows for data fetching etc.\n   */\n\n\n  var handleRowsRendered = function handleRowsRendered(rowsRendered) {\n    if (typeof onRowsRendered === 'function') {\n      onRowsRendered(_objectSpread(_objectSpread({}, rowsRendered), {}, {\n        // Send some extra info to help with data fetching\n        startItem: items[rowsRendered.startIndex],\n        stopItem: items[rowsRendered.stopIndex]\n      }), index);\n    }\n  };\n  /**\n   * Handle scroll events\n   */\n\n\n  var handleScroll = function handleScroll(event) {\n    if (typeof onScroll === 'function') {\n      onScroll(event);\n    }\n  };\n\n  return __jsx(React.Fragment, null, __jsx(ArrowKeyStepper, {\n    className: [css.hierarchyBrowserList, className || ''].join(' '),\n    mode: \"cells\",\n    columnCount: 1,\n    width: 100,\n    rowCount: items.length,\n    isControlled: true,\n    onScrollToChange: function onScrollToChange(args) {\n      handleChange(null, {\n        item: items[args.scrollToRow],\n        rowIndex: args.scrollToRow\n      });\n    },\n    scrollToRow: scrollToIndex === null ? -1 : scrollToIndex,\n    ref: ref,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 9\n    }\n  }, function (_ref3) {\n    var onSectionRendered = _ref3.onSectionRendered,\n        scrollToRow = _ref3.scrollToRow;\n    return __jsx(AutoSizer, {\n      style: {\n        width: '100%',\n        height: '100%',\n        // Prevent list container from scrolling\n        overflow: 'hidden'\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 15\n      }\n    }, function (_ref4) {\n      var width = _ref4.width,\n          height = _ref4.height;\n      return __jsx(List, {\n        height: height,\n        width: width,\n        rowCount: items.length,\n        rowHeight: function rowHeight(_ref5) {\n          var rowIndex = _ref5.index;\n\n          if (typeof _rowHeight === 'function') {\n            var item = items[rowIndex];\n            return _rowHeight({\n              item: item,\n              index: rowIndex,\n              isSelected: rowIndex === scrollToRow\n            });\n          }\n\n          return _rowHeight;\n        } // Be careful with this, causes inaccurate scrollToIndex\n        // overscanRowCount={20}\n        ,\n        scrollToIndex: scrollToIndex,\n        rowRenderer: function rowRenderer(params) {\n          var item = items[params.index];\n          var isSelected = params.index === scrollToRow;\n          var isOrigin = item.id === originId;\n\n          var rowProps = _objectSpread({\n            item: item,\n            items: items,\n            isOrigin: isOrigin,\n            isListSelected: isListSelected,\n            isSelected: isSelected,\n            onClick: function onClick(event) {\n              // console.log(rowItem);\n              handleChange(event, {\n                item: item,\n                rowIndex: params.index\n              });\n            }\n          }, params);\n\n          if (typeof rowComponent === 'function') {\n            return rowComponent(rowProps);\n          }\n\n          return __jsx(DefaultRow, _extends({}, rowProps, {\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 180,\n              columnNumber: 30\n            }\n          }));\n        },\n        ref: virtualListRef,\n        onSectionRendered: onSectionRendered,\n        onRowsRendered: handleRowsRendered,\n        onScroll: handleScroll,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 19\n        }\n      });\n    });\n  }), __jsx(ListInfo, {\n    type: type,\n    totalItems: items.length,\n    level: index + 1,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 9\n    }\n  }));\n}, \"PnnCHHKsi0GP0pfkaRZhuV2FmLM=\"));\n/**\n * Default component to render list info\n * Sits on the bottom of the list\n */\n\n_c2 = HierarchyBrowserList;\n\nvar DefaultListInfo = function DefaultListInfo(_ref6) {\n  var type = _ref6.type,\n      _ref6$totalItems = _ref6.totalItems,\n      totalItems = _ref6$totalItems === void 0 ? 0 : _ref6$totalItems,\n      level = _ref6.level;\n  return __jsx(\"div\", {\n    className: css.listInfo,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 5\n    }\n  }, __jsx(\"span\", {\n    className: css.listInfoLevel,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 7\n    }\n  }, \"Level \", level), __jsx(\"span\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 7\n    }\n  }, totalItems.toLocaleString(), \" \", type === 'item' ? 'record' : 'file', totalItems === 1 ? ' ' : 's'));\n};\n/**\n * Default component to render list row\n */\n\n\n_c3 = DefaultListInfo;\n\nvar DefaultRow = function DefaultRow(_ref7) {\n  var item = _ref7.item,\n      _ref7$index = _ref7.index,\n      index = _ref7$index === void 0 ? 0 : _ref7$index,\n      isSelected = _ref7.isSelected,\n      style = _ref7.style,\n      onClick = _ref7.onClick;\n\n  var handleClick = function handleClick(event) {\n    if (typeof onClick === 'function') {\n      // console.log(event, item);\n      onClick(event, {\n        item: item,\n        rowIndex: index\n      });\n    }\n  };\n\n  return __jsx(\"div\", {\n    onClick: handleClick,\n    style: style // key={key}\n    ,\n    className: [css.row, isSelected ? css.rowSelected : ''].join(' '),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 5\n    }\n  }, index, \". \", item.id, \" - \", item.title);\n};\n\n_c4 = DefaultRow;\nexport default HierarchyBrowserList;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"HierarchyBrowserList$React.forwardRef\");\n$RefreshReg$(_c2, \"HierarchyBrowserList\");\n$RefreshReg$(_c3, \"DefaultListInfo\");\n$RefreshReg$(_c4, \"DefaultRow\");","map":{"version":3,"sources":["/Users/luked/Documents/slnsw/dxlab-art-index/components/HierarchyColumnBrowser/HierarchyColumnBrowserList.tsx"],"names":["React","AutoSizer","List","ArrowKeyStepper","css","HierarchyBrowserList","forwardRef","ref","items","index","originId","rowHeight","defaultScrollToIndex","isListSelected","className","listInfoComponent","rowComponent","onChange","onRowsRendered","onScroll","useState","scrollToIndex","setScrollToIndex","virtualListRef","useRef","type","ListInfo","DefaultListInfo","useEffect","current","recomputeRowHeights","handleChange","event","item","rowIndex","listIndex","handleRowsRendered","rowsRendered","startItem","startIndex","stopItem","stopIndex","handleScroll","hierarchyBrowserList","join","length","args","scrollToRow","onSectionRendered","width","height","overflow","isSelected","params","isOrigin","id","rowProps","onClick","totalItems","level","listInfo","listInfoLevel","toLocaleString","DefaultRow","style","handleClick","row","rowSelected","title"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { AutoSizer, List, ArrowKeyStepper } from 'react-virtualized';\n\n// import { HierarchyBrowserRowProps } from '../../types/hierarchyTypes';\n\nimport css from './HierarchyColumnBrowserList.module.scss';\n\ntype ListProps = {\n  items: any[];\n  index: number;\n  originId?: string;\n  isListSelected?: boolean;\n  rowHeight?: number | Function;\n  defaultScrollToIndex?: number;\n  className?: string;\n  listInfoComponent?: React.ReactNode;\n  rowComponent?: React.ReactNode;\n  onChange?: Function;\n  onRowsRendered?: Function;\n  onScroll?: Function;\n};\n\ntype Ref = HTMLDivElement;\n\nconst HierarchyBrowserList = React.forwardRef<Ref, ListProps>(\n  (\n    {\n      items = [],\n      index,\n      originId,\n      rowHeight,\n      defaultScrollToIndex,\n      isListSelected,\n      className,\n      listInfoComponent,\n      rowComponent,\n      onChange,\n      onRowsRendered,\n      onScroll,\n    },\n    ref,\n  ) => {\n    const [scrollToIndex, setScrollToIndex] = React.useState(\n      defaultScrollToIndex,\n    );\n    const virtualListRef = React.useRef(null);\n    // const { type, totalSiblings } = items[0];\n    const { type } = items[0];\n\n    const ListInfo =\n      typeof listInfoComponent === 'function'\n        ? listInfoComponent\n        : DefaultListInfo;\n\n    // console.log(items);\n\n    /**\n     * Recompute rowHeights when scrollToIndex changes\n     */\n    React.useEffect(() => {\n      if (virtualListRef.current) {\n        // NOTE: be careful as recomputeRowHeights will also cause a scroll to\n        // row which may lead to jumps during infinite scroll\n        virtualListRef.current.recomputeRowHeights();\n      }\n    }, [scrollToIndex]);\n\n    /**\n     * Handles mouse clicks, keyboard and touch taps, sending changes up\n     */\n    const handleChange = (event, { item, rowIndex }) => {\n      setScrollToIndex(rowIndex);\n\n      if (typeof onChange === 'function') {\n        onChange(event, { item, rowIndex, listIndex: index });\n      }\n    };\n\n    /**\n     * Send data on visible rows for data fetching etc.\n     */\n    const handleRowsRendered = (rowsRendered) => {\n      if (typeof onRowsRendered === 'function') {\n        onRowsRendered(\n          {\n            ...rowsRendered,\n            // Send some extra info to help with data fetching\n            startItem: items[rowsRendered.startIndex],\n            stopItem: items[rowsRendered.stopIndex],\n          },\n          index,\n        );\n      }\n    };\n\n    /**\n     * Handle scroll events\n     */\n    const handleScroll = (event) => {\n      if (typeof onScroll === 'function') {\n        onScroll(event);\n      }\n    };\n\n    return (\n      <>\n        <ArrowKeyStepper\n          className={[css.hierarchyBrowserList, className || ''].join(' ')}\n          mode=\"cells\"\n          columnCount={1}\n          width={100}\n          rowCount={items.length}\n          isControlled={true}\n          onScrollToChange={(args) => {\n            handleChange(null, {\n              item: items[args.scrollToRow],\n              rowIndex: args.scrollToRow,\n            });\n          }}\n          scrollToRow={scrollToIndex === null ? -1 : scrollToIndex}\n          ref={ref}\n        >\n          {({ onSectionRendered, scrollToRow }) => {\n            return (\n              <AutoSizer\n                style={{\n                  width: '100%',\n                  height: '100%',\n                  // Prevent list container from scrolling\n                  overflow: 'hidden',\n                }}\n              >\n                {({ width, height }) => (\n                  <List\n                    height={height}\n                    width={width}\n                    rowCount={items.length}\n                    rowHeight={({ index: rowIndex }) => {\n                      if (typeof rowHeight === 'function') {\n                        const item = items[rowIndex];\n\n                        return rowHeight({\n                          item,\n                          index: rowIndex,\n                          isSelected: rowIndex === scrollToRow,\n                        });\n                      }\n\n                      return rowHeight;\n                    }}\n                    // Be careful with this, causes inaccurate scrollToIndex\n                    // overscanRowCount={20}\n                    scrollToIndex={scrollToIndex}\n                    rowRenderer={(params) => {\n                      const item = items[params.index];\n                      const isSelected = params.index === scrollToRow;\n                      const isOrigin = item.id === originId;\n\n                      const rowProps = {\n                        item,\n                        items,\n                        isOrigin,\n                        isListSelected,\n                        isSelected,\n                        onClick: (event) => {\n                          // console.log(rowItem);\n\n                          handleChange(event, {\n                            item,\n                            rowIndex: params.index,\n                          });\n                        },\n                        ...params,\n                      };\n\n                      if (typeof rowComponent === 'function') {\n                        return rowComponent(rowProps);\n                      }\n\n                      return <DefaultRow {...rowProps} />;\n                    }}\n                    ref={virtualListRef}\n                    onSectionRendered={onSectionRendered}\n                    onRowsRendered={handleRowsRendered}\n                    onScroll={handleScroll}\n                  />\n                )}\n              </AutoSizer>\n            );\n          }}\n        </ArrowKeyStepper>\n\n        <ListInfo type={type} totalItems={items.length} level={index + 1} />\n      </>\n    );\n  },\n);\n\n/**\n * Default component to render list info\n * Sits on the bottom of the list\n */\nconst DefaultListInfo = ({ type, totalItems = 0, level }) => {\n  return (\n    <div className={css.listInfo}>\n      <span className={css.listInfoLevel}>Level {level}</span>\n      <span>\n        {totalItems.toLocaleString()} {type === 'item' ? 'record' : 'file'}\n        {totalItems === 1 ? ' ' : 's'}\n      </span>\n    </div>\n  );\n};\n\n/**\n * Default component to render list row\n */\nconst DefaultRow: React.FunctionComponent<HierarchyBrowserRowProps> = ({\n  item,\n  index = 0,\n  isSelected,\n  // key,\n  style,\n  onClick,\n}) => {\n  const handleClick = (event) => {\n    if (typeof onClick === 'function') {\n      // console.log(event, item);\n\n      onClick(event, { item, rowIndex: index });\n    }\n  };\n\n  return (\n    <div\n      onClick={handleClick}\n      style={style}\n      // key={key}\n      className={[css.row, isSelected ? css.rowSelected : ''].join(' ')}\n    >\n      {index}. {item.id} - {item.title}\n    </div>\n  );\n};\n\nexport default HierarchyBrowserList;\n"]},"metadata":{},"sourceType":"module"}