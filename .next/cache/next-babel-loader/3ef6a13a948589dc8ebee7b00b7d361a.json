{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n/**\n * Flexible array flatten utility function\n */\nexport var flatten = function flatten(array) {\n  var parentId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n  var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n      _ref$idField = _ref.idField,\n      idField = _ref$idField === void 0 ? 'id' : _ref$idField,\n      _ref$childrenField = _ref.childrenField,\n      childrenField = _ref$childrenField === void 0 ? 'children' : _ref$childrenField,\n      _ref$childrenTotalFie = _ref.childrenTotalField,\n      childrenTotalField = _ref$childrenTotalFie === void 0 ? 'childrenTotal' : _ref$childrenTotalFie,\n      _ref$parentIdField = _ref.parentIdField,\n      parentIdField = _ref$parentIdField === void 0 ? 'parentId' : _ref$parentIdField;\n\n  return array.reduce(function (acc, value) {\n    var newValue = _objectSpread({}, value);\n\n    acc.push(newValue);\n\n    if (parentIdField) {\n      newValue[parentIdField] = parentId;\n      newValue[childrenTotalField] = newValue.children.length;\n    }\n\n    if (newValue.children) {\n      /* eslint-disable no-param-reassign */\n      acc = acc.concat(flatten(newValue[childrenField], newValue[idField], {\n        idField: idField,\n        childrenField: childrenField,\n        parentIdField: parentIdField\n      }));\n      /* eslint-enable no-param-reassign */\n\n      delete newValue.children;\n    } // console.log(acc);\n\n\n    return acc;\n  }, []);\n};\n/**\n * Transform flat records to hierarchy\n */\n\nexport var transformFlatToHierarchy = function transformFlatToHierarchy() {\n  var flatRecords = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var id = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  var count = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n\n  if (flatRecords.length === 0) {\n    return [];\n  }\n\n  var rootRecord = flatRecords.find(function (record) {\n    return record.parentId === id;\n  });\n  return [buildHierarchy(flatRecords, rootRecord, count)];\n};\n\nvar buildHierarchy = function buildHierarchy(flatRecords, record, count) {\n  return _objectSpread(_objectSpread({}, record), {}, {\n    children: getChildren(flatRecords, record.id).map(function (r) {\n      return buildHierarchy(flatRecords, r, count + 1);\n    })\n  });\n};\n/**\n * Transform hierarchy records to lists\n */\n\n\nexport var transformHierarchyToLists = function transformHierarchyToLists() {\n  var records = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var id = arguments.length > 1 ? arguments[1] : undefined;\n\n  if (records.length === 0) {\n    return [];\n  }\n\n  if (!id) {\n    throw new Error('id argument required');\n  }\n\n  var flatRecords = flatten(records);\n  var lists = transformFlatToLists(flatRecords, id);\n  return lists;\n};\n/**\n * Transform flat records to lists\n */\n\nexport var transformFlatToLists = function transformFlatToLists(flatRecords, id) {\n  if (flatRecords.length === 0) {\n    return [];\n  }\n\n  if (!id) {\n    throw new Error('id argument required');\n  }\n\n  var lists = buildAncestorLists(flatRecords, id);\n  var children = getChildren(flatRecords, id);\n  var hasChildren = children && children.length > 0;\n  return [].concat(_toConsumableArray(lists), _toConsumableArray(hasChildren ? [children] : []));\n};\n\nvar buildAncestorLists = function buildAncestorLists(records, id) {\n  var result = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n\n  var _ref2 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {},\n      _ref2$selectedField = _ref2.selectedField,\n      selectedField = _ref2$selectedField === void 0 ? 'isSelected' : _ref2$selectedField;\n\n  var siblings = getSiblings(records, id);\n  var siblingsWithSelectedRecord = siblings.map(function (sibling) {\n    var isSelected = sibling.id === id;\n    return _objectSpread(_objectSpread({}, sibling), {}, _defineProperty({}, selectedField, isSelected));\n  });\n  var selectedItem = getItem(records, id);\n  var parentId = selectedItem.parentId;\n  var newResult = [siblingsWithSelectedRecord].concat(_toConsumableArray(result));\n\n  if (parentId) {\n    return buildAncestorLists(records, parentId, newResult, {\n      selectedField: selectedField\n    });\n  }\n\n  return newResult;\n};\n\nvar getSiblings = function getSiblings(records, id) {\n  var selectedItem = getItem(records, id);\n  return records.filter(function (item) {\n    return item.parentId === selectedItem.parentId;\n  });\n};\n\nvar getItem = function getItem(records, id) {\n  return records.find(function (item) {\n    return item.id === id;\n  });\n};\n\nvar getChildren = function getChildren(records, id) {\n  return records.filter(function (item) {\n    return item.parentId === id;\n  });\n};","map":{"version":3,"sources":["/Users/luked/Documents/slnsw/dxlab-art-index/components/HierarchyColumnBrowser/hierarchyUtils.ts"],"names":["flatten","array","parentId","idField","childrenField","childrenTotalField","parentIdField","reduce","acc","value","newValue","push","children","length","concat","transformFlatToHierarchy","flatRecords","id","count","rootRecord","find","record","buildHierarchy","getChildren","map","r","transformHierarchyToLists","records","Error","lists","transformFlatToLists","buildAncestorLists","hasChildren","result","selectedField","siblings","getSiblings","siblingsWithSelectedRecord","sibling","isSelected","selectedItem","getItem","newResult","filter","item"],"mappings":"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","sourcesContent":["/**\n * Flexible array flatten utility function\n */\nexport const flatten = (\n  array,\n  parentId = null,\n  {\n    idField = 'id',\n    childrenField = 'children',\n    childrenTotalField = 'childrenTotal',\n    parentIdField = 'parentId',\n  } = {},\n) => {\n  return array.reduce((acc, value) => {\n    const newValue = {\n      ...value,\n    };\n\n    acc.push(newValue);\n\n    if (parentIdField) {\n      newValue[parentIdField] = parentId;\n      newValue[childrenTotalField] = newValue.children.length;\n    }\n\n    if (newValue.children) {\n      /* eslint-disable no-param-reassign */\n      acc = acc.concat(\n        flatten(newValue[childrenField], newValue[idField], {\n          idField,\n          childrenField,\n          parentIdField,\n        }),\n      );\n      /* eslint-enable no-param-reassign */\n      delete newValue.children;\n    }\n    // console.log(acc);\n    return acc;\n  }, []);\n};\n\n/**\n * Transform flat records to hierarchy\n */\nexport const transformFlatToHierarchy = (\n  flatRecords = [],\n  id = null,\n  count = 0,\n) => {\n  if (flatRecords.length === 0) {\n    return [];\n  }\n\n  const rootRecord = flatRecords.find((record) => record.parentId === id);\n\n  return [buildHierarchy(flatRecords, rootRecord, count)];\n};\n\nconst buildHierarchy = (flatRecords, record, count) => {\n  return {\n    ...record,\n    children: getChildren(flatRecords, record.id).map((r) => {\n      return buildHierarchy(flatRecords, r, count + 1);\n    }),\n  };\n};\n\n/**\n * Transform hierarchy records to lists\n */\nexport const transformHierarchyToLists = (records = [], id: string) => {\n  if (records.length === 0) {\n    return [];\n  }\n\n  if (!id) {\n    throw new Error('id argument required');\n  }\n\n  const flatRecords = flatten(records);\n  const lists = transformFlatToLists(flatRecords, id);\n\n  return lists;\n};\n\n/**\n * Transform flat records to lists\n */\nexport const transformFlatToLists = (flatRecords, id: string) => {\n  if (flatRecords.length === 0) {\n    return [];\n  }\n\n  if (!id) {\n    throw new Error('id argument required');\n  }\n\n  const lists = buildAncestorLists(flatRecords, id);\n  const children = getChildren(flatRecords, id);\n  const hasChildren = children && children.length > 0;\n\n  return [...lists, ...(hasChildren ? [children] : [])];\n};\n\nconst buildAncestorLists = (\n  records,\n  id,\n  result = [],\n  // TODO: Expose this to outer function\n  { selectedField = 'isSelected' } = {},\n) => {\n  const siblings = getSiblings(records, id);\n  const siblingsWithSelectedRecord = siblings.map((sibling) => {\n    const isSelected = sibling.id === id;\n\n    return {\n      ...sibling,\n      [selectedField]: isSelected,\n    };\n  });\n\n  const selectedItem = getItem(records, id);\n  const { parentId } = selectedItem;\n\n  const newResult = [siblingsWithSelectedRecord, ...result];\n\n  if (parentId) {\n    return buildAncestorLists(records, parentId, newResult, {\n      selectedField,\n    });\n  }\n\n  return newResult;\n};\n\nconst getSiblings = (records, id) => {\n  const selectedItem = getItem(records, id);\n\n  return records.filter((item) => {\n    return item.parentId === selectedItem.parentId;\n  });\n};\n\nconst getItem = (records, id) => {\n  return records.find((item) => {\n    return item.id === id;\n  });\n};\n\nconst getChildren = (records, id) => {\n  return records.filter((item) => {\n    return item.parentId === id;\n  });\n};\n"]},"metadata":{},"sourceType":"module"}