{"ast":null,"code":"var _jsxFileName = \"/Users/luked/Documents/slnsw/dxlab-art-index/components/HierarchyColumnBrowser/HierarchyColumnBrowserList.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport * as React from 'react';\nimport { AutoSizer, List, ArrowKeyStepper } from 'react-virtualized'; // import { HierarchyBrowserRowProps } from '../../types/hierarchyTypes';\n\nimport css from './HierarchyColumnBrowserList.module.scss';\nconst HierarchyBrowserList = /*#__PURE__*/React.forwardRef(({\n  items = [],\n  index,\n  originId,\n  rowHeight,\n  defaultScrollToIndex,\n  isListSelected,\n  className,\n  listInfoComponent,\n  rowComponent,\n  onChange,\n  onRowsRendered,\n  onScroll\n}, ref) => {\n  const [scrollToIndex, setScrollToIndex] = React.useState(defaultScrollToIndex);\n  const virtualListRef = React.useRef(null); // const { type, totalSiblings } = items[0];\n\n  const {\n    type\n  } = items[0];\n  const ListInfo = typeof listInfoComponent === 'function' ? listInfoComponent : DefaultListInfo; // console.log(items);\n\n  /**\n   * Recompute rowHeights when scrollToIndex changes\n   */\n\n  React.useEffect(() => {\n    if (virtualListRef.current) {\n      // NOTE: be careful as recomputeRowHeights will also cause a scroll to\n      // row which may lead to jumps during infinite scroll\n      virtualListRef.current.recomputeRowHeights();\n    }\n  }, [scrollToIndex]);\n  /**\n   * Handles mouse clicks, keyboard and touch taps, sending changes up\n   */\n\n  const handleChange = (event, {\n    item,\n    rowIndex\n  }) => {\n    setScrollToIndex(rowIndex);\n\n    if (typeof onChange === 'function') {\n      onChange(event, {\n        item,\n        rowIndex,\n        listIndex: index\n      });\n    }\n  };\n  /**\n   * Send data on visible rows for data fetching etc.\n   */\n\n\n  const handleRowsRendered = rowsRendered => {\n    if (typeof onRowsRendered === 'function') {\n      onRowsRendered(_objectSpread(_objectSpread({}, rowsRendered), {}, {\n        // Send some extra info to help with data fetching\n        startItem: items[rowsRendered.startIndex],\n        stopItem: items[rowsRendered.stopIndex]\n      }), index);\n    }\n  };\n  /**\n   * Handle scroll events\n   */\n\n\n  const handleScroll = event => {\n    if (typeof onScroll === 'function') {\n      onScroll(event);\n    }\n  };\n\n  return __jsx(React.Fragment, null, __jsx(ArrowKeyStepper, {\n    className: [css.hierarchyBrowserList, className || ''].join(' '),\n    mode: \"cells\",\n    columnCount: 1,\n    width: 100,\n    rowCount: items.length,\n    isControlled: true,\n    onScrollToChange: args => {\n      handleChange(null, {\n        item: items[args.scrollToRow],\n        rowIndex: args.scrollToRow\n      });\n    },\n    scrollToRow: scrollToIndex === null ? -1 : scrollToIndex,\n    ref: ref,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 9\n    }\n  }, ({\n    onSectionRendered,\n    scrollToRow\n  }) => {\n    return __jsx(AutoSizer, {\n      style: {\n        width: '100%',\n        height: '100%',\n        // Prevent list container from scrolling\n        overflow: 'hidden'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 15\n      }\n    }, ({\n      width,\n      height\n    }) => __jsx(List, {\n      height: height,\n      width: width,\n      rowCount: items.length,\n      rowHeight: ({\n        index: rowIndex\n      }) => {\n        if (typeof rowHeight === 'function') {\n          const item = items[rowIndex];\n          return rowHeight({\n            item,\n            index: rowIndex,\n            isSelected: rowIndex === scrollToRow\n          });\n        }\n\n        return rowHeight;\n      } // Be careful with this, causes inaccurate scrollToIndex\n      // overscanRowCount={20}\n      ,\n      scrollToIndex: scrollToIndex,\n      rowRenderer: params => {\n        const item = items[params.index];\n        const isSelected = params.index === scrollToRow;\n        const isOrigin = item.id === originId;\n\n        const rowProps = _objectSpread({\n          item,\n          items,\n          isOrigin,\n          isListSelected,\n          isSelected,\n          onClick: event => {\n            // console.log(rowItem);\n            handleChange(event, {\n              item,\n              rowIndex: params.index\n            });\n          }\n        }, params);\n\n        if (typeof rowComponent === 'function') {\n          return rowComponent(rowProps);\n        }\n\n        return __jsx(DefaultRow, _extends({}, rowProps, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 180,\n            columnNumber: 30\n          }\n        }));\n      },\n      ref: virtualListRef,\n      onSectionRendered: onSectionRendered,\n      onRowsRendered: handleRowsRendered,\n      onScroll: handleScroll,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 19\n      }\n    }));\n  }), __jsx(ListInfo, {\n    type: type,\n    totalItems: items.length,\n    level: index + 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 9\n    }\n  }));\n});\n/**\n * Default component to render list info\n * Sits on the bottom of the list\n */\n\nconst DefaultListInfo = ({\n  type,\n  totalItems = 0,\n  level\n}) => {\n  return __jsx(\"div\", {\n    className: css.listInfo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 5\n    }\n  }, __jsx(\"span\", {\n    className: css.listInfoLevel,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 7\n    }\n  }, \"Level \", level), __jsx(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 7\n    }\n  }, totalItems.toLocaleString(), \" \", type === 'item' ? 'record' : 'file', totalItems === 1 ? ' ' : 's'));\n};\n/**\n * Default component to render list row\n */\n\n\nconst DefaultRow = ({\n  item,\n  index = 0,\n  isSelected,\n  // key,\n  style,\n  onClick\n}) => {\n  const handleClick = event => {\n    if (typeof onClick === 'function') {\n      // console.log(event, item);\n      onClick(event, {\n        item,\n        rowIndex: index\n      });\n    }\n  };\n\n  return __jsx(\"div\", {\n    onClick: handleClick,\n    style: style // key={key}\n    ,\n    className: [css.row, isSelected ? css.rowSelected : ''].join(' '),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 5\n    }\n  }, index, \". \", item.id, \" - \", item.title);\n};\n\nexport default HierarchyBrowserList;","map":{"version":3,"sources":["/Users/luked/Documents/slnsw/dxlab-art-index/components/HierarchyColumnBrowser/HierarchyColumnBrowserList.tsx"],"names":["React","AutoSizer","List","ArrowKeyStepper","css","HierarchyBrowserList","forwardRef","items","index","originId","rowHeight","defaultScrollToIndex","isListSelected","className","listInfoComponent","rowComponent","onChange","onRowsRendered","onScroll","ref","scrollToIndex","setScrollToIndex","useState","virtualListRef","useRef","type","ListInfo","DefaultListInfo","useEffect","current","recomputeRowHeights","handleChange","event","item","rowIndex","listIndex","handleRowsRendered","rowsRendered","startItem","startIndex","stopItem","stopIndex","handleScroll","hierarchyBrowserList","join","length","args","scrollToRow","onSectionRendered","width","height","overflow","isSelected","params","isOrigin","id","rowProps","onClick","totalItems","level","listInfo","listInfoLevel","toLocaleString","DefaultRow","style","handleClick","row","rowSelected","title"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { AutoSizer, List, ArrowKeyStepper } from 'react-virtualized';\n\n// import { HierarchyBrowserRowProps } from '../../types/hierarchyTypes';\n\nimport css from './HierarchyColumnBrowserList.module.scss';\n\ntype ListProps = {\n  items: any[];\n  index: number;\n  originId?: string;\n  isListSelected?: boolean;\n  rowHeight?: number | Function;\n  defaultScrollToIndex?: number;\n  className?: string;\n  listInfoComponent?: React.ReactNode;\n  rowComponent?: React.ReactNode;\n  onChange?: Function;\n  onRowsRendered?: Function;\n  onScroll?: Function;\n};\n\ntype Ref = HTMLDivElement;\n\nconst HierarchyBrowserList = React.forwardRef<Ref, ListProps>(\n  (\n    {\n      items = [],\n      index,\n      originId,\n      rowHeight,\n      defaultScrollToIndex,\n      isListSelected,\n      className,\n      listInfoComponent,\n      rowComponent,\n      onChange,\n      onRowsRendered,\n      onScroll,\n    },\n    ref,\n  ) => {\n    const [scrollToIndex, setScrollToIndex] = React.useState(\n      defaultScrollToIndex,\n    );\n    const virtualListRef = React.useRef(null);\n    // const { type, totalSiblings } = items[0];\n    const { type } = items[0];\n\n    const ListInfo =\n      typeof listInfoComponent === 'function'\n        ? listInfoComponent\n        : DefaultListInfo;\n\n    // console.log(items);\n\n    /**\n     * Recompute rowHeights when scrollToIndex changes\n     */\n    React.useEffect(() => {\n      if (virtualListRef.current) {\n        // NOTE: be careful as recomputeRowHeights will also cause a scroll to\n        // row which may lead to jumps during infinite scroll\n        virtualListRef.current.recomputeRowHeights();\n      }\n    }, [scrollToIndex]);\n\n    /**\n     * Handles mouse clicks, keyboard and touch taps, sending changes up\n     */\n    const handleChange = (event, { item, rowIndex }) => {\n      setScrollToIndex(rowIndex);\n\n      if (typeof onChange === 'function') {\n        onChange(event, { item, rowIndex, listIndex: index });\n      }\n    };\n\n    /**\n     * Send data on visible rows for data fetching etc.\n     */\n    const handleRowsRendered = (rowsRendered) => {\n      if (typeof onRowsRendered === 'function') {\n        onRowsRendered(\n          {\n            ...rowsRendered,\n            // Send some extra info to help with data fetching\n            startItem: items[rowsRendered.startIndex],\n            stopItem: items[rowsRendered.stopIndex],\n          },\n          index,\n        );\n      }\n    };\n\n    /**\n     * Handle scroll events\n     */\n    const handleScroll = (event) => {\n      if (typeof onScroll === 'function') {\n        onScroll(event);\n      }\n    };\n\n    return (\n      <>\n        <ArrowKeyStepper\n          className={[css.hierarchyBrowserList, className || ''].join(' ')}\n          mode=\"cells\"\n          columnCount={1}\n          width={100}\n          rowCount={items.length}\n          isControlled={true}\n          onScrollToChange={(args) => {\n            handleChange(null, {\n              item: items[args.scrollToRow],\n              rowIndex: args.scrollToRow,\n            });\n          }}\n          scrollToRow={scrollToIndex === null ? -1 : scrollToIndex}\n          ref={ref}\n        >\n          {({ onSectionRendered, scrollToRow }) => {\n            return (\n              <AutoSizer\n                style={{\n                  width: '100%',\n                  height: '100%',\n                  // Prevent list container from scrolling\n                  overflow: 'hidden',\n                }}\n              >\n                {({ width, height }) => (\n                  <List\n                    height={height}\n                    width={width}\n                    rowCount={items.length}\n                    rowHeight={({ index: rowIndex }) => {\n                      if (typeof rowHeight === 'function') {\n                        const item = items[rowIndex];\n\n                        return rowHeight({\n                          item,\n                          index: rowIndex,\n                          isSelected: rowIndex === scrollToRow,\n                        });\n                      }\n\n                      return rowHeight;\n                    }}\n                    // Be careful with this, causes inaccurate scrollToIndex\n                    // overscanRowCount={20}\n                    scrollToIndex={scrollToIndex}\n                    rowRenderer={(params) => {\n                      const item = items[params.index];\n                      const isSelected = params.index === scrollToRow;\n                      const isOrigin = item.id === originId;\n\n                      const rowProps = {\n                        item,\n                        items,\n                        isOrigin,\n                        isListSelected,\n                        isSelected,\n                        onClick: (event) => {\n                          // console.log(rowItem);\n\n                          handleChange(event, {\n                            item,\n                            rowIndex: params.index,\n                          });\n                        },\n                        ...params,\n                      };\n\n                      if (typeof rowComponent === 'function') {\n                        return rowComponent(rowProps);\n                      }\n\n                      return <DefaultRow {...rowProps} />;\n                    }}\n                    ref={virtualListRef}\n                    onSectionRendered={onSectionRendered}\n                    onRowsRendered={handleRowsRendered}\n                    onScroll={handleScroll}\n                  />\n                )}\n              </AutoSizer>\n            );\n          }}\n        </ArrowKeyStepper>\n\n        <ListInfo type={type} totalItems={items.length} level={index + 1} />\n      </>\n    );\n  },\n);\n\n/**\n * Default component to render list info\n * Sits on the bottom of the list\n */\nconst DefaultListInfo = ({ type, totalItems = 0, level }) => {\n  return (\n    <div className={css.listInfo}>\n      <span className={css.listInfoLevel}>Level {level}</span>\n      <span>\n        {totalItems.toLocaleString()} {type === 'item' ? 'record' : 'file'}\n        {totalItems === 1 ? ' ' : 's'}\n      </span>\n    </div>\n  );\n};\n\n/**\n * Default component to render list row\n */\nconst DefaultRow: React.FunctionComponent<HierarchyBrowserRowProps> = ({\n  item,\n  index = 0,\n  isSelected,\n  // key,\n  style,\n  onClick,\n}) => {\n  const handleClick = (event) => {\n    if (typeof onClick === 'function') {\n      // console.log(event, item);\n\n      onClick(event, { item, rowIndex: index });\n    }\n  };\n\n  return (\n    <div\n      onClick={handleClick}\n      style={style}\n      // key={key}\n      className={[css.row, isSelected ? css.rowSelected : ''].join(' ')}\n    >\n      {index}. {item.id} - {item.title}\n    </div>\n  );\n};\n\nexport default HierarchyBrowserList;\n"]},"metadata":{},"sourceType":"module"}