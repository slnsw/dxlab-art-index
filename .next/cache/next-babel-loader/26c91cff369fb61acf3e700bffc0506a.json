{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport * as d3 from 'd3';\nexport async function getWorkDetail(host, id) {\n  // TODO: Work out https or http\n  const allWorks = await d3.csv(`http://${host}/art-index/data/works.csv`);\n  const workLinks = await d3.csv(`http://${host}/art-index/data/workLinks.csv`);\n  const work = allWorks.find(w => w.id === id);\n  const linkData = workLinks.find(l => l.workId === id);\n  const link = linkData && linkData.url;\n  const imageUrl = linkData && linkData.imageUrl;\n  return _objectSpread(_objectSpread({}, work), {}, {\n    collectionUrl: link,\n    imageUrl\n  });\n}\n\nasync function handler(req, res) {\n  const {\n    headers,\n    query\n  } = req;\n  const {\n    host\n  } = headers;\n  const {\n    id\n  } = query;\n  const result = await getWorkDetail(host, id);\n  res.statusCode = 200;\n  res.setHeader('Content-Type', 'application/json');\n  res.end(JSON.stringify(result));\n}\n\nexport default handler;","map":{"version":3,"sources":["/Users/luked/Documents/slnsw/dxlab-art-index/pages/api/art-index/works/[id].ts"],"names":["d3","getWorkDetail","host","id","allWorks","csv","workLinks","work","find","w","linkData","l","workId","link","url","imageUrl","collectionUrl","handler","req","res","headers","query","result","statusCode","setHeader","end","JSON","stringify"],"mappings":";;;;;;AAAA,OAAO,KAAKA,EAAZ,MAAoB,IAApB;AAQA,OAAO,eAAeC,aAAf,CACLC,IADK,EAELC,EAFK,EAGsB;AAC3B;AACA,QAAMC,QAA4B,GAAG,MAAMJ,EAAE,CAACK,GAAH,CACxC,UAASH,IAAK,2BAD0B,CAA3C;AAIA,QAAMI,SAAgB,GAAG,MAAMN,EAAE,CAACK,GAAH,CAC5B,UAASH,IAAK,+BADc,CAA/B;AAIA,QAAMK,IAAI,GAAGH,QAAQ,CAACI,IAAT,CAAeC,CAAD,IAAOA,CAAC,CAACN,EAAF,KAASA,EAA9B,CAAb;AACA,QAAMO,QAAQ,GAAGJ,SAAS,CAACE,IAAV,CAAgBG,CAAD,IAAOA,CAAC,CAACC,MAAF,KAAaT,EAAnC,CAAjB;AACA,QAAMU,IAAI,GAAGH,QAAQ,IAAIA,QAAQ,CAACI,GAAlC;AACA,QAAMC,QAAQ,GAAGL,QAAQ,IAAIA,QAAQ,CAACK,QAAtC;AAEA,yCAAYR,IAAZ;AAAkBS,IAAAA,aAAa,EAAEH,IAAjC;AAAuCE,IAAAA;AAAvC;AACD;;AAED,eAAeE,OAAf,CAAuBC,GAAvB,EAA4CC,GAA5C,EAAkE;AAChE,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAqBH,GAA3B;AACA,QAAM;AAAEhB,IAAAA;AAAF,MAAWkB,OAAjB;AACA,QAAM;AAAEjB,IAAAA;AAAF,MAASkB,KAAf;AAEA,QAAMC,MAAM,GAAG,MAAMrB,aAAa,CAACC,IAAD,EAAOC,EAAP,CAAlC;AAEAgB,EAAAA,GAAG,CAACI,UAAJ,GAAiB,GAAjB;AACAJ,EAAAA,GAAG,CAACK,SAAJ,CAAc,cAAd,EAA8B,kBAA9B;AACAL,EAAAA,GAAG,CAACM,GAAJ,CAAQC,IAAI,CAACC,SAAL,CAAeL,MAAf,CAAR;AACD;;AAED,eAAeL,OAAf","sourcesContent":["import * as d3 from 'd3';\nimport { NextApiRequest, NextApiResponse } from 'next';\n\nimport {\n  // ArtIndexApiQuery,\n  ArtIndexWorkType,\n} from '../../../../types/art-index-types';\n\nexport async function getWorkDetail(\n  host: string,\n  id: string,\n): Promise<ArtIndexWorkType> {\n  // TODO: Work out https or http\n  const allWorks: ArtIndexWorkType[] = await d3.csv(\n    `http://${host}/art-index/data/works.csv`,\n  );\n\n  const workLinks: any[] = await d3.csv(\n    `http://${host}/art-index/data/workLinks.csv`,\n  );\n\n  const work = allWorks.find((w) => w.id === id);\n  const linkData = workLinks.find((l) => l.workId === id);\n  const link = linkData && linkData.url;\n  const imageUrl = linkData && linkData.imageUrl;\n\n  return { ...work, collectionUrl: link, imageUrl };\n}\n\nasync function handler(req: NextApiRequest, res: NextApiResponse) {\n  const { headers, query } = req;\n  const { host } = headers;\n  const { id } = query;\n\n  const result = await getWorkDetail(host, id);\n\n  res.statusCode = 200;\n  res.setHeader('Content-Type', 'application/json');\n  res.end(JSON.stringify(result));\n}\n\nexport default handler;\n"]},"metadata":{},"sourceType":"module"}