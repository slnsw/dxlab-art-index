{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport Fuse from 'fuse.js';\n/**\n * Fuse JS search wrapper to enable async/await searches\n */\n\nconst createFuse = (data, options) => {\n  const fuse = new Fuse(data, options);\n  return _objectSpread(_objectSpread({}, fuse), {}, {\n    search: value => {\n      return new Promise(resolve => {\n        const results = fuse.search(value);\n        resolve(results);\n      });\n    }\n  });\n};\n\nexport default createFuse;","map":{"version":3,"sources":["/Users/luked/Documents/slnsw/dxlab-art-index/lib/create-fuse.ts"],"names":["Fuse","createFuse","data","options","fuse","search","value","Promise","resolve","results"],"mappings":";;;;;;AAAA,OAAOA,IAAP,MAAiB,SAAjB;AAEA;AACA;AACA;;AACA,MAAMC,UAAU,GAAG,CAAIC,IAAJ,EAAeC,OAAf,KAAiD;AAClE,QAAMC,IAAI,GAAG,IAAIJ,IAAJ,CAAYE,IAAZ,EAAkBC,OAAlB,CAAb;AAEA,yCACKC,IADL;AAEEC,IAAAA,MAAM,EAAGC,KAAD,IAAkD;AACxD,aAAO,IAAIC,OAAJ,CAAaC,OAAD,IAAa;AAC9B,cAAMC,OAAO,GAAGL,IAAI,CAACC,MAAL,CAAYC,KAAZ,CAAhB;AAEAE,QAAAA,OAAO,CAACC,OAAD,CAAP;AACD,OAJM,CAAP;AAKD;AARH;AAUD,CAbD;;AAeA,eAAeR,UAAf","sourcesContent":["import Fuse from 'fuse.js';\n\n/**\n * Fuse JS search wrapper to enable async/await searches\n */\nconst createFuse = <T>(data: T[], options: Fuse.IFuseOptions<T>) => {\n  const fuse = new Fuse<T>(data, options);\n\n  return {\n    ...fuse,\n    search: (value: string): Promise<Fuse.FuseResult<T>[]> => {\n      return new Promise((resolve) => {\n        const results = fuse.search(value);\n\n        resolve(results);\n      });\n    },\n  };\n};\n\nexport default createFuse;\n"]},"metadata":{},"sourceType":"module"}