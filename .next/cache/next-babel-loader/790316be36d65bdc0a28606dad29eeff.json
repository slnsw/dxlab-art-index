{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport queryString from 'query-string';\n\n/**\n * Create a utility to handle search queries\n */\nfunction createSearchQuery({\n  baseUrl\n}) {\n  const stringify = query => {\n    const params = queryString.stringify(query, {\n      sort: false,\n      arrayFormat: 'comma',\n      skipNull: true,\n      skipEmptyString: true\n    });\n    return `${baseUrl}${params ? `?${params.replace(/%2C/g, ',')}` : ''}`;\n  };\n\n  const stringifyAction = (query, action) => {\n    const newQuery = _objectSpread({}, query);\n\n    if (action.type === 'remove') {\n      // Convert value to array\n      const keyValue = query[action.key];\n      const values = keyValue.split(','); // Filter out value\n\n      const newValues = values.filter(value => value !== action.value); // Update newQuery\n\n      newQuery[action.key] = newValues;\n    } else if (action.type === 'add') {\n      const keyValue = query[action.key]; // TODO: Fix this obscure TS issue\n\n      newQuery[action.key] = keyValue ? `${keyValue},${action.value}` : action.value;\n    }\n\n    return stringify(newQuery);\n  };\n\n  return {\n    stringify,\n    stringifyAction\n  };\n} // function isEmpty(obj) {\n//   return Object.keys(obj).length === 0 && obj.constructor === Object;\n// }\n\n\nexport default createSearchQuery;","map":{"version":3,"sources":["/Users/luked/Documents/slnsw/dxlab-art-index/lib/create-search-query.ts"],"names":["queryString","createSearchQuery","baseUrl","stringify","query","params","sort","arrayFormat","skipNull","skipEmptyString","replace","stringifyAction","action","newQuery","type","keyValue","key","values","split","newValues","filter","value"],"mappings":";;;;;;AAAA,OAAOA,WAAP,MAAwB,cAAxB;;AAYA;AACA;AACA;AACA,SAASC,iBAAT,CAA4C;AAAEC,EAAAA;AAAF,CAA5C,EAAyD;AACvD,QAAMC,SAAS,GAAIC,KAAD,IAAc;AAC9B,UAAMC,MAAM,GAAGL,WAAW,CAACG,SAAZ,CAAsBC,KAAtB,EAA6B;AAC1CE,MAAAA,IAAI,EAAE,KADoC;AAE1CC,MAAAA,WAAW,EAAE,OAF6B;AAG1CC,MAAAA,QAAQ,EAAE,IAHgC;AAI1CC,MAAAA,eAAe,EAAE;AAJyB,KAA7B,CAAf;AAOA,WAAQ,GAAEP,OAAQ,GAAEG,MAAM,GAAI,IAAGA,MAAM,CAACK,OAAP,CAAe,MAAf,EAAuB,GAAvB,CAA4B,EAAnC,GAAuC,EAAG,EAApE;AACD,GATD;;AAWA,QAAMC,eAAe,GAAG,CAACP,KAAD,EAAWQ,MAAX,KAAiC;AACvD,UAAMC,QAAQ,qBACTT,KADS,CAAd;;AAIA,QAAIQ,MAAM,CAACE,IAAP,KAAgB,QAApB,EAA8B;AAC5B;AACA,YAAMC,QAAQ,GAAGX,KAAK,CAACQ,MAAM,CAACI,GAAR,CAAtB;AACA,YAAMC,MAAM,GAAGF,QAAQ,CAACG,KAAT,CAAe,GAAf,CAAf,CAH4B,CAI5B;;AACA,YAAMC,SAAS,GAAGF,MAAM,CAACG,MAAP,CAAeC,KAAD,IAAWA,KAAK,KAAKT,MAAM,CAACS,KAA1C,CAAlB,CAL4B,CAM5B;;AACAR,MAAAA,QAAQ,CAACD,MAAM,CAACI,GAAR,CAAR,GAAuBG,SAAvB;AACD,KARD,MAQO,IAAIP,MAAM,CAACE,IAAP,KAAgB,KAApB,EAA2B;AAChC,YAAMC,QAAQ,GAAGX,KAAK,CAACQ,MAAM,CAACI,GAAR,CAAtB,CADgC,CAEhC;;AACAH,MAAAA,QAAQ,CAACD,MAAM,CAACI,GAAR,CAAR,GAAuBD,QAAQ,GAC1B,GAAEA,QAAS,IAAGH,MAAM,CAACS,KAAM,EADD,GAE3BT,MAAM,CAACS,KAFX;AAGD;;AAED,WAAOlB,SAAS,CAACU,QAAD,CAAhB;AACD,GAtBD;;AAwBA,SAAO;AACLV,IAAAA,SADK;AAELQ,IAAAA;AAFK,GAAP;AAID,C,CAED;AACA;AACA;;;AAEA,eAAeV,iBAAf","sourcesContent":["import queryString from 'query-string';\n\ninterface Action<T> {\n  type: 'remove' | 'add';\n  key: keyof T;\n  value: string;\n}\n\ninterface Query {\n  [key: string]: string | number;\n}\n\n/**\n * Create a utility to handle search queries\n */\nfunction createSearchQuery<T extends Query>({ baseUrl }) {\n  const stringify = (query: T) => {\n    const params = queryString.stringify(query, {\n      sort: false,\n      arrayFormat: 'comma',\n      skipNull: true,\n      skipEmptyString: true,\n    });\n\n    return `${baseUrl}${params ? `?${params.replace(/%2C/g, ',')}` : ''}`;\n  };\n\n  const stringifyAction = (query: T, action: Action<T>) => {\n    const newQuery = {\n      ...query,\n    };\n\n    if (action.type === 'remove') {\n      // Convert value to array\n      const keyValue = query[action.key] as { split: Function };\n      const values = keyValue.split(',');\n      // Filter out value\n      const newValues = values.filter((value) => value !== action.value);\n      // Update newQuery\n      newQuery[action.key] = newValues;\n    } else if (action.type === 'add') {\n      const keyValue = query[action.key];\n      // TODO: Fix this obscure TS issue\n      newQuery[action.key] = keyValue\n        ? `${keyValue},${action.value}`\n        : action.value;\n    }\n\n    return stringify(newQuery);\n  };\n\n  return {\n    stringify,\n    stringifyAction,\n  };\n}\n\n// function isEmpty(obj) {\n//   return Object.keys(obj).length === 0 && obj.constructor === Object;\n// }\n\nexport default createSearchQuery;\n"]},"metadata":{},"sourceType":"module"}