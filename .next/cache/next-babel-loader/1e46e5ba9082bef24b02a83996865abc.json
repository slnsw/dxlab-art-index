{"ast":null,"code":"import { useState, useCallback, useEffect } from 'react'; // import { DimensionObject, UseDimensionsArgs, UseDimensionsHook } from \"./types\";\n// https://github.com/Swizec/useDimensions/blob/master/src/index.ts\n\nfunction getDimensionObject(node) {\n  const rect = node.getBoundingClientRect();\n  const {\n    scrollWidth,\n    scrollLeft\n  } = node;\n  return {\n    width: rect.width,\n    height: rect.height,\n    top: 'x' in rect ? rect.x : rect.top,\n    left: 'y' in rect ? rect.y : rect.left,\n    x: 'x' in rect ? rect.x : rect.left,\n    y: 'y' in rect ? rect.y : rect.top,\n    right: rect.right,\n    bottom: rect.bottom,\n    scrollWidth,\n    scrollLeft\n  };\n}\n\nfunction useDimensions({\n  liveMeasure = true\n} = {}) {\n  const {\n    0: dimensions,\n    1: setDimensions\n  } = useState({});\n  const {\n    0: node,\n    1: setNode\n  } = useState(null);\n  const ref = useCallback(refNode => {\n    setNode(refNode);\n  }, []); // Was previously useLayoutEffect, but this was causing SSR issues.\n\n  /* eslint-disable consistent-return */\n\n  useEffect(() => {\n    if (node) {\n      const measure = () => window.requestAnimationFrame(() => setDimensions(getDimensionObject(node)));\n\n      measure();\n\n      if (liveMeasure) {\n        window.addEventListener('resize', measure);\n        window.addEventListener('scroll', measure);\n        return () => {\n          window.removeEventListener('resize', measure);\n          window.removeEventListener('scroll', measure);\n        };\n      }\n    }\n  }, [liveMeasure, node]);\n  /* eslint-enable consistent-return */\n\n  return [ref, dimensions, node];\n}\n\nexport default useDimensions;","map":{"version":3,"sources":["/Users/luked/Documents/slnsw/dxlab-art-index/lib/hooks/use-dimensions.js"],"names":["useState","useCallback","useEffect","getDimensionObject","node","rect","getBoundingClientRect","scrollWidth","scrollLeft","width","height","top","x","left","y","right","bottom","useDimensions","liveMeasure","dimensions","setDimensions","setNode","ref","refNode","measure","window","requestAnimationFrame","addEventListener","removeEventListener"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,WAAnB,EAAgCC,SAAhC,QAAiD,OAAjD,C,CACA;AAEA;;AAEA,SAASC,kBAAT,CAA4BC,IAA5B,EAAkC;AAChC,QAAMC,IAAI,GAAGD,IAAI,CAACE,qBAAL,EAAb;AACA,QAAM;AAAEC,IAAAA,WAAF;AAAeC,IAAAA;AAAf,MAA8BJ,IAApC;AAEA,SAAO;AACLK,IAAAA,KAAK,EAAEJ,IAAI,CAACI,KADP;AAELC,IAAAA,MAAM,EAAEL,IAAI,CAACK,MAFR;AAGLC,IAAAA,GAAG,EAAE,OAAON,IAAP,GAAcA,IAAI,CAACO,CAAnB,GAAuBP,IAAI,CAACM,GAH5B;AAILE,IAAAA,IAAI,EAAE,OAAOR,IAAP,GAAcA,IAAI,CAACS,CAAnB,GAAuBT,IAAI,CAACQ,IAJ7B;AAKLD,IAAAA,CAAC,EAAE,OAAOP,IAAP,GAAcA,IAAI,CAACO,CAAnB,GAAuBP,IAAI,CAACQ,IAL1B;AAMLC,IAAAA,CAAC,EAAE,OAAOT,IAAP,GAAcA,IAAI,CAACS,CAAnB,GAAuBT,IAAI,CAACM,GAN1B;AAOLI,IAAAA,KAAK,EAAEV,IAAI,CAACU,KAPP;AAQLC,IAAAA,MAAM,EAAEX,IAAI,CAACW,MARR;AASLT,IAAAA,WATK;AAULC,IAAAA;AAVK,GAAP;AAYD;;AAED,SAASS,aAAT,CAAuB;AAAEC,EAAAA,WAAW,GAAG;AAAhB,IAAyB,EAAhD,EAAoD;AAClD,QAAM;AAAA,OAACC,UAAD;AAAA,OAAaC;AAAb,MAA8BpB,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM;AAAA,OAACI,IAAD;AAAA,OAAOiB;AAAP,MAAkBrB,QAAQ,CAAC,IAAD,CAAhC;AAEA,QAAMsB,GAAG,GAAGrB,WAAW,CAAEsB,OAAD,IAAa;AACnCF,IAAAA,OAAO,CAACE,OAAD,CAAP;AACD,GAFsB,EAEpB,EAFoB,CAAvB,CAJkD,CAQlD;;AACA;;AACArB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIE,IAAJ,EAAU;AACR,YAAMoB,OAAO,GAAG,MACdC,MAAM,CAACC,qBAAP,CAA6B,MAC3BN,aAAa,CAACjB,kBAAkB,CAACC,IAAD,CAAnB,CADf,CADF;;AAIAoB,MAAAA,OAAO;;AAEP,UAAIN,WAAJ,EAAiB;AACfO,QAAAA,MAAM,CAACE,gBAAP,CAAwB,QAAxB,EAAkCH,OAAlC;AACAC,QAAAA,MAAM,CAACE,gBAAP,CAAwB,QAAxB,EAAkCH,OAAlC;AAEA,eAAO,MAAM;AACXC,UAAAA,MAAM,CAACG,mBAAP,CAA2B,QAA3B,EAAqCJ,OAArC;AACAC,UAAAA,MAAM,CAACG,mBAAP,CAA2B,QAA3B,EAAqCJ,OAArC;AACD,SAHD;AAID;AACF;AACF,GAlBQ,EAkBN,CAACN,WAAD,EAAcd,IAAd,CAlBM,CAAT;AAmBA;;AAEA,SAAO,CAACkB,GAAD,EAAMH,UAAN,EAAkBf,IAAlB,CAAP;AACD;;AAED,eAAea,aAAf","sourcesContent":["import { useState, useCallback, useEffect } from 'react';\n// import { DimensionObject, UseDimensionsArgs, UseDimensionsHook } from \"./types\";\n\n// https://github.com/Swizec/useDimensions/blob/master/src/index.ts\n\nfunction getDimensionObject(node) {\n  const rect = node.getBoundingClientRect();\n  const { scrollWidth, scrollLeft } = node;\n\n  return {\n    width: rect.width,\n    height: rect.height,\n    top: 'x' in rect ? rect.x : rect.top,\n    left: 'y' in rect ? rect.y : rect.left,\n    x: 'x' in rect ? rect.x : rect.left,\n    y: 'y' in rect ? rect.y : rect.top,\n    right: rect.right,\n    bottom: rect.bottom,\n    scrollWidth,\n    scrollLeft,\n  };\n}\n\nfunction useDimensions({ liveMeasure = true } = {}) {\n  const [dimensions, setDimensions] = useState({});\n  const [node, setNode] = useState(null);\n\n  const ref = useCallback((refNode) => {\n    setNode(refNode);\n  }, []);\n\n  // Was previously useLayoutEffect, but this was causing SSR issues.\n  /* eslint-disable consistent-return */\n  useEffect(() => {\n    if (node) {\n      const measure = () =>\n        window.requestAnimationFrame(() =>\n          setDimensions(getDimensionObject(node)),\n        );\n      measure();\n\n      if (liveMeasure) {\n        window.addEventListener('resize', measure);\n        window.addEventListener('scroll', measure);\n\n        return () => {\n          window.removeEventListener('resize', measure);\n          window.removeEventListener('scroll', measure);\n        };\n      }\n    }\n  }, [liveMeasure, node]);\n  /* eslint-enable consistent-return */\n\n  return [ref, dimensions, node];\n}\n\nexport default useDimensions;\n"]},"metadata":{},"sourceType":"module"}