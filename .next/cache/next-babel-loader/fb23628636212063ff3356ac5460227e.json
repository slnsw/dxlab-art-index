{"ast":null,"code":"export default function initMaze() {\n  // This function builds a random but algorithmically generated maze\n  // for the 404 page. Rather than using Prim's algorithm, recursive division,\n  // recursive backtracking or such things, we use a version of Conway's Game of Life\n  // with a modified rule set. Later we set a bunch of blobs free to traverse the maze\n  // in a mostly random fashion. Clicking rebuilds the maze. -Luke Dearnley, Feb 2018\n  let speed = 18; // in frames per second\n\n  let maze = [];\n  let y;\n  let x;\n  let el;\n  let elW;\n  let scale;\n  let width;\n  let height;\n  let canvas;\n  let context;\n  let canvasWidth;\n  let canvasHeight;\n  let xOffset;\n  let yOffset;\n  let noGoXMax;\n  let noGoYMax;\n  let blobs;\n  let numBlobs;\n  let evCount;\n  let evLimit;\n  let numHoles;\n  let initContent;\n  let line;\n  let l;\n  let c;\n  let n = 0;\n  let centreText;\n  let elm;\n  let interval;\n  let offsetX;\n  let offsetY;\n  let timeout = false;\n  let blink;\n  const blinkDelay = 70;\n  const colourBlob = '#e6007e';\n  const blinkCol = '#e6007e';\n  const screenBG = '#060606';\n  const edgeCols = ['#060606', '#888888', '#a05a85', '#c32d81', '#e6007e', '#e6007e']; // Conway's Game of Life params\n  // B3/S12345 or B3/S1234 both create mazes\n  // whereas B3/S23 is the 'standard game'\n\n  const birthNum = 3;\n  const dieBelow = 1;\n  let dieAbove = 4; // are we building the maze? 1 = yes\n\n  let building = 0; // movement vectors for my blobs\n  // 1 = up, 2 = right, 3 = down, 4 = left\n\n  const move = [[0, 0], [0, -1], [1, 0], [0, 1], [-1, 0]];\n  el = document.getElementById('dxmaze-holder');\n\n  if (el) {\n    // query size of div and compute all dimensions from that\n    setDims();\n    draw404();\n    seedMaze(); // and away we go\n\n    setup();\n    interval = setInterval(update, 1000 / speed);\n  } // ////////////////////////////////////////////////\n\n\n  function setDims() {\n    // find out how much room we have for the canvas\n    el = document.getElementById('dxmaze-holder');\n    elW = el.offsetWidth; // set the size of a square in px\n\n    scale = 10;\n\n    if (elW < 400) {\n      // use smaller squares for small screens\n      scale = 5;\n    } // work out h&w for grid\n\n\n    width = Math.floor(elW / scale);\n    height = Math.floor(width * 2 / 3); // scale that up for the canvas\n\n    canvasWidth = width * scale;\n    canvasHeight = height * scale; // work out where the TL corner of the 19x9 box in the centre saying 404 will be positions\n\n    xOffset = Math.floor((width - 19) / 2);\n    yOffset = Math.floor((height - 9) / 2); // now work out its BR corner is\n\n    noGoXMax = xOffset + 19;\n    noGoYMax = yOffset + 9; // blobs will roam the completed maze\n\n    blobs = [];\n    numBlobs = Math.floor(Math.random() * height / 3 + height / 3); // count the evolutions\n\n    evCount = 0; // for how long? proportional to size\n\n    evLimit = width; // how many extra holes are we going to drill into the finished maze?\n\n    numHoles = width * 3; // proportional to size again\n    // set up the canvas\n\n    canvas = document.getElementById('dxmaze');\n    canvas.width = canvasWidth;\n    canvas.height = canvasHeight;\n    context = canvas.getContext('2d'); // determine canvas offset, so we can work out where we are clicking on it later\n\n    offsetX = 0;\n    offsetY = 0;\n    elm = canvas;\n\n    while (elm.offsetParent) {\n      offsetX += elm.offsetLeft;\n      offsetY += elm.offsetTop;\n      elm = elm.offsetParent;\n    }\n  } // ////////////////////////////////////////////////\n\n\n  function setup() {\n    if (maze.length) {\n      clearMaze();\n    } else {\n      makeMaze();\n    } // now add initial content\n\n\n    for (n = 0; n < initContent.length; n += 1) {\n      if (x >= xOffset && x < noGoXMax && y >= yOffset && y < noGoYMax) {\n        maze[initContent[n][1]][initContent[n][0]] = 5;\n      } else {\n        maze[initContent[n][1]][initContent[n][0]] = 4;\n      }\n    } // draw initial state\n\n\n    updateMaze(); // set building of maze to start\n\n    building = 1; // and listen for re-sizing\n\n    window.addEventListener('resize', throttle);\n  } // ////////////////////////////////////////////////\n\n\n  function update() {\n    if (building) {\n      evolve();\n      updateMaze();\n    } else {\n      moveBlobs();\n      updateBlobs();\n    }\n  }\n\n  function updateMaze() {\n    for (y = 0; y < height; y++) {\n      for (x = 0; x < width; x++) {\n        if (maze[y][x] > 0) {\n          context.fillStyle = edgeCols[maze[y][x]];\n          context.fillRect(x * scale + 1, y * scale + 1, scale, scale);\n        } else {\n          context.clearRect(x * scale + 1, y * scale + 1, scale, scale);\n        }\n      }\n    }\n  }\n\n  function clearMaze() {\n    for (y = 0; y < height; y++) {\n      for (x = 0; x < width; x++) {\n        maze[y][x] = 0;\n      }\n    }\n  }\n\n  function makeMaze() {\n    // initialise maze grid as empty\n    maze = [];\n\n    for (y = 0; y < height; y += 1) {\n      line = [];\n\n      for (x = 0; x < width; x += 1) {\n        line[x] = 0;\n      }\n\n      maze[y] = line;\n    }\n  }\n\n  function evolve() {\n    // create a blank grid for the next generation of the evolving maze\n    const nextMaze = [];\n\n    for (y = 0; y < height; y += 1) {\n      line = [];\n\n      for (x = 0; x < width; x += 1) {\n        line[x] = 0;\n      }\n\n      nextMaze[y] = line;\n    }\n\n    let neighbours; // loop through grid\n\n    for (y = 0; y < height; y += 1) {\n      for (x = 0; x < width; x += 1) {\n        // don't grow into the 'no go zone' in the middle where it says '404'\n        if (x >= xOffset && x < noGoXMax && y >= yOffset && y < noGoYMax) {\n          nextMaze[y][x] = maze[y][x];\n        } else {\n          // otherwise aply the rules of Conway's Game of Life\n          neighbours = countNeighbours(y, x);\n\n          if (maze[y][x] !== 0) {\n            if (neighbours >= dieBelow && neighbours <= dieAbove) {\n              nextMaze[y][x] = maze[y][x] - 1;\n\n              if (nextMaze[y][x] === 0) {\n                nextMaze[y][x] = 1;\n              }\n            }\n          } else if (neighbours === birthNum) {\n            nextMaze[y][x] = 4;\n          }\n        }\n      }\n    }\n\n    maze = nextMaze;\n    evCount += 1;\n\n    if (evCount > evLimit) {\n      // we have evolved long enough! Switch modes\n      building = 0;\n      blinkIt();\n      makeExtraHoles();\n      setupBlobs();\n      speed = 25; // and listen for clicks now\n\n      canvas.addEventListener('mousedown', clickHandler, false);\n    } // switch back n forth between B3/S1234 and B3/S12345 every 3 generations\n\n\n    if (evCount % 3 === 0) {\n      toggleDieAbove();\n    }\n  }\n\n  function seedMaze() {\n    // now some random bits around the edges of the 404 that form the start of the Conways maze growth\n    l = initContent.length;\n    c = Math.floor(Math.random() * 9 + 9);\n\n    for (n = 0; n < c; n += 1) {\n      initContent[l] = [Math.floor(Math.random() * 20 + xOffset), yOffset - 1];\n      l += 1;\n    }\n\n    c = Math.random() * 9 + 9;\n\n    for (n = 0; n < c; n += 1) {\n      initContent[l] = [Math.floor(Math.random() * 20 + xOffset), noGoYMax + 1];\n      l += 1;\n    }\n\n    c = Math.random() * 4 + 5;\n\n    for (n = 0; n < c; n += 1) {\n      initContent[l] = [xOffset - 1, Math.floor(Math.random() * 10 + yOffset)];\n      l += 1;\n    }\n\n    c = Math.random() * 4 + 5;\n\n    for (n = 0; n < c; n += 1) {\n      initContent[l] = [noGoXMax + 1, Math.floor(Math.random() * 10 + yOffset)];\n      l += 1;\n    }\n  }\n\n  function seedMazeAt(mx, my) {\n    x = mx;\n    y = my; // make some random bits near the mouse click that form the start of the Conways maze growth\n\n    while (x >= xOffset && x < noGoXMax && y >= yOffset && y < noGoYMax) {\n      x = Math.floor(Math.random() * (width * 0.8) + width * 0.1);\n      y = Math.floor(Math.random() * (height * 0.8) + height * 0.1);\n    }\n\n    x -= 5;\n    y -= 5;\n\n    if (x < 0) {\n      x = 0;\n    }\n\n    if (y < 0) {\n      y = 0;\n    }\n\n    if (x + 10 > width) {\n      x = width - 10;\n    }\n\n    if (y + 10 > height) {\n      y = height - 10;\n    }\n\n    l = initContent.length;\n    c = Math.floor(Math.random() * 20 + 19);\n\n    for (n = 0; n < c; n += 1) {\n      initContent[l] = [Math.floor(Math.random() * 10 + x), Math.floor(Math.random() * 10 + y)];\n      l += 1;\n    }\n  }\n\n  function countNeighbours(yv, xv) {\n    n = 0;\n\n    if (valueAt(yv - 1, xv - 1) > 0) {\n      n += 1;\n    }\n\n    if (valueAt(yv - 1, xv) > 0) {\n      n += 1;\n    }\n\n    if (valueAt(yv - 1, xv + 1) > 0) {\n      n += 1;\n    }\n\n    if (valueAt(yv, xv - 1) > 0) {\n      n += 1;\n    }\n\n    if (valueAt(yv, xv + 1) > 0) {\n      n += 1;\n    }\n\n    if (valueAt(yv + 1, xv - 1) > 0) {\n      n += 1;\n    }\n\n    if (valueAt(yv + 1, xv) > 0) {\n      n += 1;\n    }\n\n    if (valueAt(yv + 1, xv + 1) > 0) {\n      n += 1;\n    }\n\n    return n;\n  }\n\n  function countCardinalNeighbours(yv, xv) {\n    n = 0;\n\n    if (valueAt(yv - 1, xv) > 0) {\n      n += 1;\n    }\n\n    if (valueAt(yv, xv - 1) > 0) {\n      n += 1;\n    }\n\n    if (valueAt(yv, xv + 1) > 0) {\n      n += 1;\n    }\n\n    if (valueAt(yv + 1, xv) > 0) {\n      n += 1;\n    }\n\n    return n;\n  }\n\n  function valueAt(yv, xv) {\n    let o; // only return values outside of the no go zone (ie the 404 writing)\n\n    if (yv >= 0 && yv < height && xv >= 0 && xv < width) {\n      o = maze[yv][xv];\n    } else {\n      o = 0;\n    }\n\n    return o;\n  }\n\n  function toggleDieAbove() {\n    // switch beween B3/S1234 and B3/S12345 rule sets of Conway's Game of Life\n    if (dieAbove === 4) {\n      dieAbove = 5;\n    } else {\n      dieAbove = 4;\n    }\n  }\n\n  function makeExtraHoles() {\n    for (c = 0; c < numHoles; c += 1) {\n      x = Math.floor(Math.random() * (width * 0.8) + width * 0.1);\n      y = Math.floor(Math.random() * (height * 0.8) + height * 0.1);\n      maze[y][x] = 0;\n    }\n  }\n\n  function blinkIt() {\n    document.body.style.background = blinkCol;\n    blink = setInterval(blinkOff, blinkDelay);\n  }\n\n  function blinkOff() {\n    document.body.style.background = screenBG;\n    clearInterval(blink);\n  }\n\n  function setupBlobs() {\n    let dir;\n\n    for (c = 0; c < numBlobs; c += 1) {\n      x = Math.floor(Math.random() * (width * 0.8) + width * 0.1);\n      y = Math.floor(Math.random() * (height * 0.8) + height * 0.1);\n\n      while (maze[y][x] === 1 || countCardinalNeighbours(y, x) < 2) {\n        x = Math.floor(Math.random() * (width * 0.8) + width * 0.1);\n        y = Math.floor(Math.random() * (height * 0.8) + height * 0.1);\n      }\n\n      dir = Math.floor(Math.random() * 4 + 1);\n      blobs[c] = [x, y, dir];\n    }\n\n    updateBlobs();\n  }\n\n  function moveBlobs() {\n    clearBlobs();\n    let newX;\n    let newY;\n\n    for (c = 0; c < numBlobs; c += 1) {\n      if (countCardinalNeighbours(blobs[c][1], blobs[c][0]) < 2) {\n        blobs[c][2] = Math.floor(Math.random() * 4 + 1);\n        newX = blobs[c][0] + move[blobs[c][2]][0];\n        newY = blobs[c][1] + move[blobs[c][2]][1];\n\n        if (newX < 0 || newY < 0 || newX >= width || newY >= height) {\n          blobs[c][2] = Math.floor(Math.random() * 4 + 1);\n        } else if (maze[newY][newX] > 0) {\n          blobs[c][2] = Math.floor(Math.random() * 4 + 1);\n        } else {\n          blobs[c][0] = newX;\n          blobs[c][1] = newY;\n        }\n      } else {\n        newX = blobs[c][0] + move[blobs[c][2]][0];\n        newY = blobs[c][1] + move[blobs[c][2]][1];\n\n        if (newX < 0 || newY < 0 || newX >= width || newY >= height) {\n          blobs[c][2] = Math.floor(Math.random() * 4 + 1);\n        } else if (maze[newY][newX] > 0) {\n          blobs[c][2] = Math.floor(Math.random() * 4 + 1);\n        } else {\n          blobs[c][0] = newX;\n          blobs[c][1] = newY;\n        }\n      }\n    }\n  }\n\n  function updateBlobs() {\n    context.fillStyle = colourBlob;\n\n    for (c = 0; c < numBlobs; c += 1) {\n      context.fillRect(blobs[c][0] * scale + 1, blobs[c][1] * scale + 1, scale, scale);\n    }\n  }\n\n  function clearBlobs() {\n    for (c = 0; c < numBlobs; c += 1) {\n      context.clearRect(blobs[c][0] * scale + 1, blobs[c][1] * scale + 1, scale, scale);\n    }\n  }\n\n  function clickHandler(e) {\n    window.clearInterval(interval);\n    canvas.removeEventListener('mousedown', clickHandler);\n    blinkIt();\n    const mx = Math.floor((e.pageX - offsetX) / scale);\n    const my = Math.floor((e.pageY - offsetY) / scale);\n    clearMaze();\n    updateMaze();\n    setDims();\n    draw404();\n    seedMazeAt(mx, my);\n    building = 1; // and away we go (again)\n\n    setup();\n    interval = setInterval(update, 1000 / speed);\n  }\n\n  function throttle() {\n    // clear the timeout\n    clearTimeout(timeout); // start timing for event \"completion\"\n\n    timeout = setTimeout(resizeHandler, 250);\n  }\n\n  function resizeHandler() {\n    window.clearInterval(interval);\n    canvas.removeEventListener('mousedown', clickHandler);\n    setDims();\n    maze = [];\n    makeMaze();\n    updateMaze();\n    draw404();\n    seedMaze();\n    building = 1; // and away we go (again)\n\n    setup();\n    interval = setInterval(update, 1000 / speed);\n  }\n\n  function draw404() {\n    // 7px x 5px characters saying 404\n    centreText = [// the 4\n    [4, 1], [3, 2], [4, 2], [2, 3], [4, 3], [1, 4], [4, 4], [1, 5], [2, 5], [3, 5], [4, 5], [5, 5], [4, 6], [4, 7], // the 0\n    [8, 1], [9, 1], [10, 1], [7, 2], [11, 2], [7, 3], [10, 3], [11, 3], [7, 4], [9, 4], [11, 4], [7, 5], [8, 5], [11, 5], [7, 6], [11, 6], [8, 7], [9, 7], [10, 7], // another 4\n    [16, 1], [15, 2], [16, 2], [14, 3], [16, 3], [13, 4], [16, 4], [13, 5], [14, 5], [15, 5], [16, 5], [17, 5], [16, 6], [16, 7]];\n    initContent = [];\n    l = 0;\n\n    for (n = 0; n < centreText.length; n += 1) {\n      initContent[l] = [centreText[n][0] + xOffset, centreText[n][1] + yOffset];\n      l += 1;\n    }\n  }\n}","map":{"version":3,"sources":["/Users/luked/Documents/slnsw/dxlab-art-index/lib/dxmaze.ts"],"names":["initMaze","speed","maze","y","x","el","elW","scale","width","height","canvas","context","canvasWidth","canvasHeight","xOffset","yOffset","noGoXMax","noGoYMax","blobs","numBlobs","evCount","evLimit","numHoles","initContent","line","l","c","n","centreText","elm","interval","offsetX","offsetY","timeout","blink","blinkDelay","colourBlob","blinkCol","screenBG","edgeCols","birthNum","dieBelow","dieAbove","building","move","document","getElementById","setDims","draw404","seedMaze","setup","setInterval","update","offsetWidth","Math","floor","random","getContext","offsetParent","offsetLeft","offsetTop","length","clearMaze","makeMaze","updateMaze","window","addEventListener","throttle","evolve","moveBlobs","updateBlobs","fillStyle","fillRect","clearRect","nextMaze","neighbours","countNeighbours","blinkIt","makeExtraHoles","setupBlobs","clickHandler","toggleDieAbove","seedMazeAt","mx","my","yv","xv","valueAt","countCardinalNeighbours","o","body","style","background","blinkOff","clearInterval","dir","clearBlobs","newX","newY","e","removeEventListener","pageX","pageY","clearTimeout","setTimeout","resizeHandler"],"mappings":"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","sourcesContent":["export default function initMaze() {\n  // This function builds a random but algorithmically generated maze\n  // for the 404 page. Rather than using Prim's algorithm, recursive division,\n  // recursive backtracking or such things, we use a version of Conway's Game of Life\n  // with a modified rule set. Later we set a bunch of blobs free to traverse the maze\n  // in a mostly random fashion. Clicking rebuilds the maze. -Luke Dearnley, Feb 2018\n  let speed = 18; // in frames per second\n  let maze = [];\n  let y;\n  let x;\n  let el;\n  let elW;\n  let scale;\n  let width;\n  let height;\n  let canvas;\n  let context;\n  let canvasWidth;\n  let canvasHeight;\n  let xOffset;\n  let yOffset;\n  let noGoXMax;\n  let noGoYMax;\n  let blobs;\n  let numBlobs;\n  let evCount;\n  let evLimit;\n  let numHoles;\n  let initContent;\n  let line;\n  let l;\n  let c;\n  let n = 0;\n  let centreText;\n  let elm;\n  let interval;\n  let offsetX;\n  let offsetY;\n  let timeout = false;\n  let blink;\n  const blinkDelay = 70;\n\n  const colourBlob = '#e6007e';\n  const blinkCol = '#e6007e';\n  const screenBG = '#060606';\n  const edgeCols = [\n    '#060606',\n    '#888888',\n    '#a05a85',\n    '#c32d81',\n    '#e6007e',\n    '#e6007e',\n  ];\n\n  // Conway's Game of Life params\n  // B3/S12345 or B3/S1234 both create mazes\n  // whereas B3/S23 is the 'standard game'\n  const birthNum = 3;\n  const dieBelow = 1;\n  let dieAbove = 4;\n\n  // are we building the maze? 1 = yes\n  let building = 0;\n\n  // movement vectors for my blobs\n  // 1 = up, 2 = right, 3 = down, 4 = left\n  const move = [\n    [0, 0],\n    [0, -1],\n    [1, 0],\n    [0, 1],\n    [-1, 0],\n  ];\n\n  el = document.getElementById('dxmaze-holder');\n  if (el) {\n    // query size of div and compute all dimensions from that\n    setDims();\n\n    draw404();\n    seedMaze();\n\n    // and away we go\n    setup();\n    interval = setInterval(update, 1000 / speed);\n  }\n  // ////////////////////////////////////////////////\n\n  function setDims() {\n    // find out how much room we have for the canvas\n    el = document.getElementById('dxmaze-holder');\n    elW = el.offsetWidth;\n\n    // set the size of a square in px\n    scale = 10;\n    if (elW < 400) {\n      // use smaller squares for small screens\n      scale = 5;\n    }\n\n    // work out h&w for grid\n    width = Math.floor(elW / scale);\n    height = Math.floor((width * 2) / 3);\n\n    // scale that up for the canvas\n    canvasWidth = width * scale;\n    canvasHeight = height * scale;\n\n    // work out where the TL corner of the 19x9 box in the centre saying 404 will be positions\n    xOffset = Math.floor((width - 19) / 2);\n    yOffset = Math.floor((height - 9) / 2);\n\n    // now work out its BR corner is\n    noGoXMax = xOffset + 19;\n    noGoYMax = yOffset + 9;\n\n    // blobs will roam the completed maze\n    blobs = [];\n    numBlobs = Math.floor((Math.random() * height) / 3 + height / 3);\n\n    // count the evolutions\n    evCount = 0;\n    // for how long? proportional to size\n    evLimit = width;\n\n    // how many extra holes are we going to drill into the finished maze?\n    numHoles = width * 3; // proportional to size again\n\n    // set up the canvas\n    canvas = document.getElementById('dxmaze');\n    canvas.width = canvasWidth;\n    canvas.height = canvasHeight;\n    context = canvas.getContext('2d');\n\n    // determine canvas offset, so we can work out where we are clicking on it later\n    offsetX = 0;\n    offsetY = 0;\n    elm = canvas;\n    while (elm.offsetParent) {\n      offsetX += elm.offsetLeft;\n      offsetY += elm.offsetTop;\n      elm = elm.offsetParent;\n    }\n  }\n\n  // ////////////////////////////////////////////////\n  function setup() {\n    if (maze.length) {\n      clearMaze();\n    } else {\n      makeMaze();\n    }\n\n    // now add initial content\n    for (n = 0; n < initContent.length; n += 1) {\n      if (x >= xOffset && x < noGoXMax && y >= yOffset && y < noGoYMax) {\n        maze[initContent[n][1]][initContent[n][0]] = 5;\n      } else {\n        maze[initContent[n][1]][initContent[n][0]] = 4;\n      }\n    }\n\n    // draw initial state\n    updateMaze();\n\n    // set building of maze to start\n    building = 1;\n\n    // and listen for re-sizing\n    window.addEventListener('resize', throttle);\n  }\n\n  // ////////////////////////////////////////////////\n  function update() {\n    if (building) {\n      evolve();\n      updateMaze();\n    } else {\n      moveBlobs();\n      updateBlobs();\n    }\n  }\n\n  function updateMaze() {\n    for (y = 0; y < height; y++) {\n      for (x = 0; x < width; x++) {\n        if (maze[y][x] > 0) {\n          context.fillStyle = edgeCols[maze[y][x]];\n          context.fillRect(x * scale + 1, y * scale + 1, scale, scale);\n        } else {\n          context.clearRect(x * scale + 1, y * scale + 1, scale, scale);\n        }\n      }\n    }\n  }\n\n  function clearMaze() {\n    for (y = 0; y < height; y++) {\n      for (x = 0; x < width; x++) {\n        maze[y][x] = 0;\n      }\n    }\n  }\n\n  function makeMaze() {\n    // initialise maze grid as empty\n    maze = [];\n    for (y = 0; y < height; y += 1) {\n      line = [];\n      for (x = 0; x < width; x += 1) {\n        line[x] = 0;\n      }\n      maze[y] = line;\n    }\n  }\n\n  function evolve() {\n    // create a blank grid for the next generation of the evolving maze\n    const nextMaze = [];\n    for (y = 0; y < height; y += 1) {\n      line = [];\n      for (x = 0; x < width; x += 1) {\n        line[x] = 0;\n      }\n      nextMaze[y] = line;\n    }\n\n    let neighbours;\n    // loop through grid\n    for (y = 0; y < height; y += 1) {\n      for (x = 0; x < width; x += 1) {\n        // don't grow into the 'no go zone' in the middle where it says '404'\n        if (x >= xOffset && x < noGoXMax && y >= yOffset && y < noGoYMax) {\n          nextMaze[y][x] = maze[y][x];\n        } else {\n          // otherwise aply the rules of Conway's Game of Life\n          neighbours = countNeighbours(y, x);\n          if (maze[y][x] !== 0) {\n            if (neighbours >= dieBelow && neighbours <= dieAbove) {\n              nextMaze[y][x] = maze[y][x] - 1;\n              if (nextMaze[y][x] === 0) {\n                nextMaze[y][x] = 1;\n              }\n            }\n          } else if (neighbours === birthNum) {\n            nextMaze[y][x] = 4;\n          }\n        }\n      }\n    }\n    maze = nextMaze;\n    evCount += 1;\n    if (evCount > evLimit) {\n      // we have evolved long enough! Switch modes\n      building = 0;\n      blinkIt();\n      makeExtraHoles();\n      setupBlobs();\n      speed = 25;\n      // and listen for clicks now\n      canvas.addEventListener('mousedown', clickHandler, false);\n    }\n    // switch back n forth between B3/S1234 and B3/S12345 every 3 generations\n    if (evCount % 3 === 0) {\n      toggleDieAbove();\n    }\n  }\n\n  function seedMaze() {\n    // now some random bits around the edges of the 404 that form the start of the Conways maze growth\n    l = initContent.length;\n    c = Math.floor(Math.random() * 9 + 9);\n    for (n = 0; n < c; n += 1) {\n      initContent[l] = [Math.floor(Math.random() * 20 + xOffset), yOffset - 1];\n      l += 1;\n    }\n    c = Math.random() * 9 + 9;\n    for (n = 0; n < c; n += 1) {\n      initContent[l] = [Math.floor(Math.random() * 20 + xOffset), noGoYMax + 1];\n      l += 1;\n    }\n    c = Math.random() * 4 + 5;\n    for (n = 0; n < c; n += 1) {\n      initContent[l] = [xOffset - 1, Math.floor(Math.random() * 10 + yOffset)];\n      l += 1;\n    }\n    c = Math.random() * 4 + 5;\n    for (n = 0; n < c; n += 1) {\n      initContent[l] = [noGoXMax + 1, Math.floor(Math.random() * 10 + yOffset)];\n      l += 1;\n    }\n  }\n\n  function seedMazeAt(mx, my) {\n    x = mx;\n    y = my;\n    // make some random bits near the mouse click that form the start of the Conways maze growth\n    while (x >= xOffset && x < noGoXMax && y >= yOffset && y < noGoYMax) {\n      x = Math.floor(Math.random() * (width * 0.8) + width * 0.1);\n      y = Math.floor(Math.random() * (height * 0.8) + height * 0.1);\n    }\n    x -= 5;\n    y -= 5;\n    if (x < 0) {\n      x = 0;\n    }\n    if (y < 0) {\n      y = 0;\n    }\n    if (x + 10 > width) {\n      x = width - 10;\n    }\n    if (y + 10 > height) {\n      y = height - 10;\n    }\n    l = initContent.length;\n    c = Math.floor(Math.random() * 20 + 19);\n    for (n = 0; n < c; n += 1) {\n      initContent[l] = [\n        Math.floor(Math.random() * 10 + x),\n        Math.floor(Math.random() * 10 + y),\n      ];\n      l += 1;\n    }\n  }\n\n  function countNeighbours(yv, xv) {\n    n = 0;\n    if (valueAt(yv - 1, xv - 1) > 0) {\n      n += 1;\n    }\n    if (valueAt(yv - 1, xv) > 0) {\n      n += 1;\n    }\n    if (valueAt(yv - 1, xv + 1) > 0) {\n      n += 1;\n    }\n    if (valueAt(yv, xv - 1) > 0) {\n      n += 1;\n    }\n    if (valueAt(yv, xv + 1) > 0) {\n      n += 1;\n    }\n    if (valueAt(yv + 1, xv - 1) > 0) {\n      n += 1;\n    }\n    if (valueAt(yv + 1, xv) > 0) {\n      n += 1;\n    }\n    if (valueAt(yv + 1, xv + 1) > 0) {\n      n += 1;\n    }\n    return n;\n  }\n\n  function countCardinalNeighbours(yv, xv) {\n    n = 0;\n    if (valueAt(yv - 1, xv) > 0) {\n      n += 1;\n    }\n    if (valueAt(yv, xv - 1) > 0) {\n      n += 1;\n    }\n    if (valueAt(yv, xv + 1) > 0) {\n      n += 1;\n    }\n    if (valueAt(yv + 1, xv) > 0) {\n      n += 1;\n    }\n    return n;\n  }\n\n  function valueAt(yv, xv) {\n    let o;\n    // only return values outside of the no go zone (ie the 404 writing)\n    if (yv >= 0 && yv < height && xv >= 0 && xv < width) {\n      o = maze[yv][xv];\n    } else {\n      o = 0;\n    }\n    return o;\n  }\n\n  function toggleDieAbove() {\n    // switch beween B3/S1234 and B3/S12345 rule sets of Conway's Game of Life\n    if (dieAbove === 4) {\n      dieAbove = 5;\n    } else {\n      dieAbove = 4;\n    }\n  }\n\n  function makeExtraHoles() {\n    for (c = 0; c < numHoles; c += 1) {\n      x = Math.floor(Math.random() * (width * 0.8) + width * 0.1);\n      y = Math.floor(Math.random() * (height * 0.8) + height * 0.1);\n      maze[y][x] = 0;\n    }\n  }\n\n  function blinkIt() {\n    document.body.style.background = blinkCol;\n    blink = setInterval(blinkOff, blinkDelay);\n  }\n\n  function blinkOff() {\n    document.body.style.background = screenBG;\n    clearInterval(blink);\n  }\n\n  function setupBlobs() {\n    let dir;\n    for (c = 0; c < numBlobs; c += 1) {\n      x = Math.floor(Math.random() * (width * 0.8) + width * 0.1);\n      y = Math.floor(Math.random() * (height * 0.8) + height * 0.1);\n      while (maze[y][x] === 1 || countCardinalNeighbours(y, x) < 2) {\n        x = Math.floor(Math.random() * (width * 0.8) + width * 0.1);\n        y = Math.floor(Math.random() * (height * 0.8) + height * 0.1);\n      }\n      dir = Math.floor(Math.random() * 4 + 1);\n      blobs[c] = [x, y, dir];\n    }\n    updateBlobs();\n  }\n\n  function moveBlobs() {\n    clearBlobs();\n    let newX;\n    let newY;\n    for (c = 0; c < numBlobs; c += 1) {\n      if (countCardinalNeighbours(blobs[c][1], blobs[c][0]) < 2) {\n        blobs[c][2] = Math.floor(Math.random() * 4 + 1);\n        newX = blobs[c][0] + move[blobs[c][2]][0];\n        newY = blobs[c][1] + move[blobs[c][2]][1];\n        if (newX < 0 || newY < 0 || newX >= width || newY >= height) {\n          blobs[c][2] = Math.floor(Math.random() * 4 + 1);\n        } else if (maze[newY][newX] > 0) {\n          blobs[c][2] = Math.floor(Math.random() * 4 + 1);\n        } else {\n          blobs[c][0] = newX;\n          blobs[c][1] = newY;\n        }\n      } else {\n        newX = blobs[c][0] + move[blobs[c][2]][0];\n        newY = blobs[c][1] + move[blobs[c][2]][1];\n        if (newX < 0 || newY < 0 || newX >= width || newY >= height) {\n          blobs[c][2] = Math.floor(Math.random() * 4 + 1);\n        } else if (maze[newY][newX] > 0) {\n          blobs[c][2] = Math.floor(Math.random() * 4 + 1);\n        } else {\n          blobs[c][0] = newX;\n          blobs[c][1] = newY;\n        }\n      }\n    }\n  }\n\n  function updateBlobs() {\n    context.fillStyle = colourBlob;\n    for (c = 0; c < numBlobs; c += 1) {\n      context.fillRect(\n        blobs[c][0] * scale + 1,\n        blobs[c][1] * scale + 1,\n        scale,\n        scale,\n      );\n    }\n  }\n\n  function clearBlobs() {\n    for (c = 0; c < numBlobs; c += 1) {\n      context.clearRect(\n        blobs[c][0] * scale + 1,\n        blobs[c][1] * scale + 1,\n        scale,\n        scale,\n      );\n    }\n  }\n\n  function clickHandler(e) {\n    window.clearInterval(interval);\n    canvas.removeEventListener('mousedown', clickHandler);\n    blinkIt();\n    const mx = Math.floor((e.pageX - offsetX) / scale);\n    const my = Math.floor((e.pageY - offsetY) / scale);\n    clearMaze();\n    updateMaze();\n    setDims();\n    draw404();\n    seedMazeAt(mx, my);\n    building = 1;\n    // and away we go (again)\n    setup();\n    interval = setInterval(update, 1000 / speed);\n  }\n\n  function throttle() {\n    // clear the timeout\n    clearTimeout(timeout);\n    // start timing for event \"completion\"\n    timeout = setTimeout(resizeHandler, 250);\n  }\n\n  function resizeHandler() {\n    window.clearInterval(interval);\n    canvas.removeEventListener('mousedown', clickHandler);\n    setDims();\n    maze = [];\n    makeMaze();\n    updateMaze();\n    draw404();\n    seedMaze();\n    building = 1;\n    // and away we go (again)\n    setup();\n    interval = setInterval(update, 1000 / speed);\n  }\n\n  function draw404() {\n    // 7px x 5px characters saying 404\n    centreText = [\n      // the 4\n      [4, 1],\n      [3, 2],\n      [4, 2],\n      [2, 3],\n      [4, 3],\n      [1, 4],\n      [4, 4],\n      [1, 5],\n      [2, 5],\n      [3, 5],\n      [4, 5],\n      [5, 5],\n      [4, 6],\n      [4, 7],\n      // the 0\n      [8, 1],\n      [9, 1],\n      [10, 1],\n      [7, 2],\n      [11, 2],\n      [7, 3],\n      [10, 3],\n      [11, 3],\n      [7, 4],\n      [9, 4],\n      [11, 4],\n      [7, 5],\n      [8, 5],\n      [11, 5],\n      [7, 6],\n      [11, 6],\n      [8, 7],\n      [9, 7],\n      [10, 7],\n      // another 4\n      [16, 1],\n      [15, 2],\n      [16, 2],\n      [14, 3],\n      [16, 3],\n      [13, 4],\n      [16, 4],\n      [13, 5],\n      [14, 5],\n      [15, 5],\n      [16, 5],\n      [17, 5],\n      [16, 6],\n      [16, 7],\n    ];\n    initContent = [];\n    l = 0;\n    for (n = 0; n < centreText.length; n += 1) {\n      initContent[l] = [centreText[n][0] + xOffset, centreText[n][1] + yOffset];\n      l += 1;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}